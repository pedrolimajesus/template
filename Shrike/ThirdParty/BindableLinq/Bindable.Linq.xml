<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bindable.Linq</name>
    </assembly>
    <members>
        <member name="T:Bindable.Linq.Iterators.SelectIterator`2">
            <summary>
            The Iterator created when performing a select and projection into another type.
            </summary>
            <typeparam name="TSource">The type of source item.</typeparam>
            <typeparam name="TResult">The type of result item.</typeparam>
        </member>
        <member name="T:Bindable.Linq.Iterators.Iterator`2">
            <summary>
            Serves as a base class for all Bindable LINQ Iterator containers. Iterators are Bindable LINQ operations 
            which take one or more collections of items, and return a collection of items. This is in contrast
            with Aggregators, which take one or more collections but return a single result item. 
            </summary>
            <typeparam name="TSource">The type of source item used in the Iterator.</typeparam>
            <typeparam name="TResult">The type of result item provided by the Iterator.</typeparam>
            <remarks>
            <para>
            Whilst Bindable LINQ collections are read-only, we implement the <see cref="T:System.Collections.IList"/> interface because 
            it stops WPF producing a wrapper object around the result set, which results in better performance. 
            For more information, see:
            http://msdn2.microsoft.com/en-gb/library/aa970683.aspx#data_binding.
            </para>
            </remarks>
        </member>
        <member name="T:Bindable.Linq.Helpers.DispatcherBound">
            <summary>
            Serves as a base class for all Bindable LINQ objects which are bound to a specific owning thread.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Helpers.DispatcherBound.#ctor(Bindable.Linq.Threading.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Helpers.DispatcherBound"/> class.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Bindable.Linq.Helpers.DispatcherBound.AssertDispatcherThread">
            <summary>
            Asserts that the calling thread is owned by the current dispatcher.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Helpers.DispatcherBound.AssertUnsealed">
            <summary>
            Asserts that the current object has not been sealed and evaluated.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Helpers.DispatcherBound.Seal">
            <summary>
            Seals this instance. Certain settings cannot be changed once the instance has been sealed.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Helpers.DispatcherBound.BeforeSealingOverride">
            <summary>
            When overridden in a derived class, provides the ability for the class to validate any settings before it is "sealed" permanently.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Helpers.DispatcherBound.BeforeDisposeOverride">
            <summary>
            Called just before the object is disposed and all event subscriptions are released.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Helpers.DispatcherBound.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Helpers.DispatcherBound.InstanceLock">
            <summary>
            Gets the instance lock.
            </summary>
            <value>The instance lock.</value>
        </member>
        <member name="P:Bindable.Linq.Helpers.DispatcherBound.InstanceLifetime">
            <summary>
            Gets the instance lifetime.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Helpers.DispatcherBound.Dispatcher">
            <summary>
            Gets the dispatcher that owns this object.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Interfaces.IBindableCollection`1">
            <summary>
            An interface implemented by all Bindable LINQ bindable collections.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="T:Bindable.Linq.Interfaces.IBindableCollection">
            <summary>
            An interface implemented by all Bindable LINQ bindable collections.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Interfaces.IRefreshable">
            <summary>
            Implemented by objects that provide a Refresh method.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Interfaces.IRefreshable.Refresh">
            <summary>
            Refreshes the object.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Dependencies.IAcceptsDependencies">
            <summary>
            Implemented by Bindable LINQ operations which can have dependencies.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.IAcceptsDependencies.AcceptDependency(Bindable.Linq.Dependencies.IDependencyDefinition)">
            <summary>
            Sets a new dependency on a Bindable LINQ operation.
            </summary>
            <param name="definition">A definition of the dependency.</param>
        </member>
        <member name="M:Bindable.Linq.Interfaces.IBindableCollection.Evaluate">
            <summary>
            Evaluates this instance.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Interfaces.IBindableCollection.Dispatcher">
            <summary>
            Gets the dispatcher.
            </summary>
            <value>The dispatcher.</value>
        </member>
        <member name="P:Bindable.Linq.Interfaces.IBindableCollection.Count">
            <summary>
            Gets the count of items in the collection.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Interfaces.IBindableCollection.HasEvaluated">
            <summary>
            Gets a value indicating whether this instance has already evaluated.
            </summary>
            <value>
            <c>true</c> if this instance has evaluated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Bindable.Linq.Interfaces.IBindableCollection`1.Item(System.Int32)">
            <summary>
            Gets the <typeparamref name="TElement"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="E:Bindable.Linq.Interfaces.IBindableCollection`1.Evaluating">
            <summary>
            Occurs when the collection is being evaluated (GetEnumerator() is called) for the first time, just before it returns 
            the results, to provide insight into the items being evaluated. This allows consumers to iterate the items in a collection 
            just before they are returned to the caller, while still enabling delayed execution of queries.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Iterators.Iterator`2.#ctor(Bindable.Linq.Interfaces.IBindableCollection{`0},Bindable.Linq.Threading.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Iterators.Iterator`2"/> class.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Iterators.Iterator`2.Evaluate">
            <summary>
            Evaluates this instance.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Iterators.Iterator`2.Refresh">
            <summary>
            Refreshes this query by telling sources to refresh. The sources should tell their sources to refresh, until eventually, someone repopulates itself and raises a Reset event.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Iterators.Iterator`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Bindable.Linq.Iterators.Iterator`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Bindable.Linq.Iterators.Iterator`2.AcceptDependency(Bindable.Linq.Dependencies.IDependencyDefinition)">
            <summary>
            Accepts a dependency.
            </summary>
            <param name="definition">The definition.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.Iterator`2.ReactToReset">
            <summary>
            Resets the result collection of the Iterator and re-reads all of the source collections.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Iterators.Iterator`2.EvaluateSourceCollection">
            <summary>
            When implemented in a derived class, processes all items in a given source collection.
            </summary>
            <remarks>Warning: No locks should be held when invoking this method.</remarks>
        </member>
        <member name="M:Bindable.Linq.Iterators.Iterator`2.ReactToItemPropertyChanged(`0,System.String)">
            <summary>
            When overridden in a derived class, processes a PropertyChanged event on a source item.
            </summary>
            <param name="item">The item.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.Iterator`2.ReactToAdd(System.Int32,`0)">
            <summary>
            When overridden in a derived class, processes an Add event over a range of items.
            </summary>
            <param name="insertionIndex">Index of the insertion.</param>
            <param name="addedItem">The added item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.Iterator`2.ReactToReplace(System.Int32,`0,`0)">
            <summary>
            When overridden in a derived class, processes a Replace event over a range of items.
            </summary>
            <param name="index">The index.</param>
            <param name="oldItem">The old item.</param>
            <param name="newItem">The new item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.Iterator`2.ReactToMove(System.Int32,System.Int32,`0)">
            <summary>
            When overridden in a derived class, processes a Move event over a range of items.
            </summary>
            <param name="originalIndex">Index of the original.</param>
            <param name="newIndex">The new index.</param>
            <param name="movedItem">The moved item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.Iterator`2.ReactToRemove(System.Int32,`0)">
            <summary>
            When overridden in a derived class, processes a Remove event over a range of items.
            </summary>
            <param name="index">The index.</param>
            <param name="removedItem">The removed item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.Iterator`2.BeforeResetOverride">
            <summary>
            When overridden in a derived class, provides the derived class with the ability to perform custom actions when 
            the collection is reset, before the sources are re-loaded.
            </summary>
            <remarks>Warning: No locks should be held when invoking this method.</remarks>
        </member>
        <member name="M:Bindable.Linq.Iterators.Iterator`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <remarks>Warning: No locks should be held when invoking this method.</remarks>
        </member>
        <member name="M:Bindable.Linq.Iterators.Iterator`2.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Bindable.Linq.Iterators.Iterator`2.PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.Iterator`2.OnEvaluating(Bindable.Linq.Interfaces.Events.EvaluatingEventArgs{`1})">
            <summary>
            Raises the <see cref="E:Bindable.Linq.Iterators.Iterator`2.Evaluating"/> event.
            </summary>
            <param name="e">The <see cref="T:Bindable.Linq.Interfaces.Events.EvaluatingEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.Iterator`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Bindable.Linq.Iterators.Iterator`2.CollectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.Iterator`2.BeforeDisposeOverride">
            <summary>
            When overridden in a derived class, gives the class an opportunity to dispose any expensive components.
            </summary>
        </member>
        <member name="E:Bindable.Linq.Iterators.Iterator`2.PropertyChanged">
            <summary>
            Occurs when a property on this Iterator changes.
            </summary>
        </member>
        <member name="E:Bindable.Linq.Iterators.Iterator`2.Evaluating">
            <summary>
            Occurs when the collection is being evaluated (GetEnumerator() is called) for the first time, just before it returns
            the results, to provide insight into the items being evaluated. This allows consumers to iterate the items in a collection
            just before they are returned to the caller, while still enabling delayed execution of queries.
            </summary>
        </member>
        <member name="E:Bindable.Linq.Iterators.Iterator`2.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Iterators.Iterator`2.CollectionChangedSuspendedState">
            <summary>
            Gets a state scope that can be entered and left to indicate the Iterator should not raise
            CollectionChanged events.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Iterators.Iterator`2.ResultCollection">
            <summary>
            The result collection exposed by the Iterator.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Iterators.Iterator`2.SourceCollection">
            <summary>
            Gets the source collection.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Iterators.Iterator`2.Item(System.Int32)">
            <summary>
            Gets the <typeparamref name="TResult"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Bindable.Linq.Iterators.Iterator`2.Count">
            <summary>
            Gets a count of the number of items in this Iterator.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Iterators.Iterator`2.HasEvaluated">
            <summary>
            Gets a value indicating whether this instance has already evaluated.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Iterators.SelectIterator`2.#ctor(Bindable.Linq.Interfaces.IBindableCollection{`0},System.Func{`0,`1},Bindable.Linq.Threading.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Iterators.SelectIterator`2"/> class.
            </summary>
            <param name="sourceCollection">The source collection.</param>
            <param name="projector">The projector.</param>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.SelectIterator`2.EvaluateSourceCollection">
            <summary>
            When implemented in a derived class, processes all items in a given source collection.
            </summary>
            <remarks>Warning: No locks should be held when invoking this method.</remarks>
        </member>
        <member name="M:Bindable.Linq.Iterators.SelectIterator`2.ReactToAdd(System.Int32,`0)">
            <summary>
            When overridden in a derived class, processes an Add event over a range of items.
            </summary>
            <param name="insertionIndex">Index of the insertion.</param>
            <param name="addedItem">The added item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.SelectIterator`2.ReactToMove(System.Int32,System.Int32,`0)">
            <summary>
            When overridden in a derived class, processes a Move event over a range of items.
            </summary>
            <param name="originalIndex">Index of the original.</param>
            <param name="newIndex">The new index.</param>
            <param name="movedItem">The moved item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.SelectIterator`2.ReactToReplace(System.Int32,`0,`0)">
            <summary>
            When overridden in a derived class, processes a Replace event over a range of items.
            </summary>
            <param name="index">The index.</param>
            <param name="oldItem">The old item.</param>
            <param name="newItem">The new item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.SelectIterator`2.ReactToItemPropertyChanged(`0,System.String)">
            <summary>
            When overridden in a derived class, processes a PropertyChanged event on a source item.
            </summary>
            <param name="item">The item.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.SelectIterator`2.BeforeResetOverride">
            <summary>
            When overridden in a derived class, provides the derived class with the ability to perform custom actions when
            the collection is reset, before the sources are re-loaded.
            </summary>
            <remarks>Warning: No locks should be held when invoking this method.</remarks>
        </member>
        <member name="M:Bindable.Linq.Iterators.SelectIterator`2.BeforeDisposeOverride">
            <summary>
            When overridden in a derived class, gives the class an opportunity to dispose any expensive components.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Iterators.SelectIterator`2.ProjectionRegister">
            <summary>
            Gets the projection register. This register keeps track of projections from a source type 
            to a result type.
            </summary>
            <value>The projection register.</value>
        </member>
        <member name="T:Bindable.Linq.Interfaces.IBindableGrouping`2">
            <summary>
            Implemented by classes that represent a bindable collection of objects with a common key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="T:Bindable.Linq.Helpers.InternalExtensions">
            <summary>
            Contains useful extension methods used only in Bindable LINQ.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Helpers.InternalExtensions.ShouldNotBeNull(System.Object,System.String)">
            <summary>
            Checks that a given argument is not null.
            </summary>
            <param name="item">The item to check.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:Bindable.Linq.Helpers.InternalExtensions.ShouldBe``1(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            Checks that a given argument is not null.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="item">The item to check.</param>
            <param name="condition">The condition.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Bindable.Linq.Helpers.InternalExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Formats a string.
            </summary>
            <param name="format">The format.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Helpers.InternalExtensions.EnumerateSafely``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enumerates the safely.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="elements">The elements.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Helpers.InternalExtensions.UnionAll``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Collects multiple enumerables into one.
            </summary>
            <typeparam name="TElement">The type being enumerated.</typeparam>
            <param name="enumerables">The enumerables.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Helpers.InternalExtensions.ConcatStrings(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates a collection of strings into one, using a specified seperator between them.
            </summary>
            <param name="strings">The strings.</param>
            <param name="separator">The separator.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Helpers.InternalExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Applies the given action to every element in the collection.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Helpers.InternalExtensions.Evaluate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Evaluates the specified collection.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Bindable.Linq.Helpers.InternalExtensions.Item``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Enables indexed item retrieval over IEnumerable. O(n).
            </summary>
        </member>
        <member name="T:Bindable.Linq.Helpers.ElementActioner`1">
            <summary>
            Performs actions on the elements of a collection when they are added or removed. Ensures 
            the action is always performed at least once. 
            </summary>
            <remarks>
            This object uses a direct event reference rather than weak references on purpose. The lifetime of 
            the object should be coupled to the owning class. 
            </remarks>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Helpers.ElementActioner`1.#ctor(Bindable.Linq.Interfaces.IBindableCollection{`0},System.Action{`0},System.Action{`0},Bindable.Linq.Threading.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Helpers.ElementActioner`1"/> class.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="collection">The collection.</param>
            <param name="addAction">The add action.</param>
            <param name="removeAction">The remove action.</param>
        </member>
        <member name="M:Bindable.Linq.Helpers.ElementActioner`1.Collection_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event of the Collection.
            </summary>
        </member>
        <member name="T:Bindable.Linq.BindableEnumerable">
            <summary>
            This class contains all of the extension method implementations provided by Bindable LINQ. 
            </summary>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.GroupBy``2(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2"/> object contains a sequence of objects and a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.GroupBy``2(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Groups the elements of a sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2"/> object contains a sequence of objects and a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.GroupBy``2(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2"/> object contains a collection of objects and a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.GroupBy``2(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2"/> object contains a collection of objects and a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.GroupBy``3(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <typeparam name="TElement">The type of the elements in the <see cref="T:System.Linq.IGrouping`2"/>.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="elementSelector">A function to map each source element to an element in the <see cref="T:System.Linq.IGrouping`2"/>.</param>
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2"/> object contains a collection of objects of type TElement and a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.GroupBy``3(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <typeparam name="TElement">The type of the elements in the <see cref="T:System.Linq.IGrouping`2"/>.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="elementSelector">A function to map each source element to an element in the <see cref="T:System.Linq.IGrouping`2"/>.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2"/> object contains a collection of objects of type TElement and a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.GroupBy``3(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,Bindable.Linq.Interfaces.IBindableCollection{``0},``2}})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector"/>.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="resultSelector">A function to create a result value from each group.</param>
            <returns>
            A collection of elements of type TResult where each element represents a projection over a group and its key.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.GroupBy``3(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,Bindable.Linq.Interfaces.IBindableCollection{``0},``2}},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector"/>.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="resultSelector">A function to create a result value from each group.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>
            A collection of elements of type TResult where each element represents a projection over a group and its key.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.GroupBy``3(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <typeparam name="TElement">The type of the elements in the <see cref="T:System.Linq.IGrouping`2"/>.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2"/>.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2"/> object contains a collection of objects of type TElement and a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.GroupBy``3(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Groups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <typeparam name="TElement">The type of the elements in the <see cref="T:System.Linq.IGrouping`2"/>.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2"/>.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2"/> object contains a collection of objects of type TElement and a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.GroupBy``4(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,Bindable.Linq.Interfaces.IBindableCollection{``2},``3}})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2"/>.</typeparam>
            <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector"/>.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2"/>.</param>
            <param name="resultSelector">A function to create a result value from each group.</param>
            <returns>
            A collection of elements of type TResult where each element represents a projection over a group and its key.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.GroupBy``4(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,Bindable.Linq.Interfaces.IBindableCollection{``2},``3}},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2"/>.</typeparam>
            <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector"/>.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2"/>.</param>
            <param name="resultSelector">A function to create a result value from each group.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>
            A collection of elements of type TResult where each element represents a projection over a group and its key.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.GroupBy``3(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,Bindable.Linq.Interfaces.IBindableCollection{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector"/>.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="resultSelector">A function to create a result value from each group.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys with.</param>
            <returns>
            A collection of elements of type TResult where each element represents a projection over a group and its key.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.GroupBy``3(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,Bindable.Linq.Interfaces.IBindableCollection{``0},``2}},System.Collections.Generic.IEqualityComparer{``1},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector"/>.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="resultSelector">A function to create a result value from each group.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys with.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>
            A collection of elements of type TResult where each element represents a projection over a group and its key.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.GroupBy``4(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,Bindable.Linq.Interfaces.IBindableCollection{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2"/>.</typeparam>
            <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector"/>.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2"/>.</param>
            <param name="resultSelector">A function to create a result value from each group.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys with.</param>
            <returns>
            A collection of elements of type TResult where each element represents a projection over a group and its key.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.GroupBy``4(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,Bindable.Linq.Interfaces.IBindableCollection{``2},``3}},System.Collections.Generic.IEqualityComparer{``1},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2"/>.</typeparam>
            <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector"/>.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2"/>.</param>
            <param name="resultSelector">A function to create a result value from each group.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys with.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>
            A collection of elements of type TResult where each element represents a projection over a group and its key.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Max(Bindable.Linq.Interfaces.IBindableCollection{System.Decimal})">
            <summary>Returns the maximum value in a sequence of <see cref="T:System.Decimal" /> values.</summary>
            <returns>The maximum value in the sequence.</returns>
            <param name="source">A sequence of <see cref="T:System.Decimal" /> values to determine the maximum value of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Max(Bindable.Linq.Interfaces.IBindableCollection{System.Nullable{System.Double}})">
            <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Double" /> values.</summary>
            <returns>A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
            <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to determine the maximum value of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Max(Bindable.Linq.Interfaces.IBindableCollection{System.Double})">
            <summary>Returns the maximum value in a sequence of <see cref="T:System.Double" /> values.</summary>
            <returns>The maximum value in the sequence.</returns>
            <param name="source">A sequence of <see cref="T:System.Double" /> values to determine the maximum value of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Max(Bindable.Linq.Interfaces.IBindableCollection{System.Nullable{System.Int32}})">
            <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
            <returns>A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence. </returns>
            <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to determine the maximum value of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Max(Bindable.Linq.Interfaces.IBindableCollection{System.Nullable{System.Int64}})">
            <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
            <returns>A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence. </returns>
            <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to determine the maximum value of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Max(Bindable.Linq.Interfaces.IBindableCollection{System.Int32})">
            <summary>Returns the maximum value in a sequence of <see cref="T:System.Int32" /> values.</summary>
            <returns>The maximum value in the sequence.</returns>
            <param name="source">A sequence of <see cref="T:System.Int32" /> values to determine the maximum value of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Max(Bindable.Linq.Interfaces.IBindableCollection{System.Nullable{System.Decimal}})">
            <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
            <returns>A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence. </returns>
            <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the maximum value of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Max(Bindable.Linq.Interfaces.IBindableCollection{System.Int64})">
            <summary>Returns the maximum value in a sequence of <see cref="T:System.Int64" /> values.</summary>
            <returns>The maximum value in the sequence.</returns>
            <param name="source">A sequence of <see cref="T:System.Int64" /> values to determine the maximum value of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Max(Bindable.Linq.Interfaces.IBindableCollection{System.Nullable{System.Single}})">
            <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Single" /> values.</summary>
            <returns>A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
            <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to determine the maximum value of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Max(Bindable.Linq.Interfaces.IBindableCollection{System.Single})">
            <summary>Returns the maximum value in a sequence of <see cref="T:System.Single" /> values.</summary>
            <returns>The maximum value in the sequence.</returns>
            <param name="source">A sequence of <see cref="T:System.Single" /> values to determine the maximum value of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Max``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
            <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Decimal" /> value.</summary>
            <returns>The maximum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Max``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
            <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Double" /> value.</summary>
            <returns>The maximum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Max``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
            <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Decimal" /> value.</summary>
            <returns>The value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Max``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
            <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Double" /> value.</summary>
            <returns>The value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Max``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
            <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int32" /> value.</summary>
            <returns>The maximum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Max``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
            <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int32" /> value.</summary>
            <returns>The value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Max``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
            <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int64" /> value.</summary>
            <returns>The value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Max``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
            <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int64" /> value.</summary>
            <returns>The maximum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Max``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
            <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Single" /> value.</summary>
            <returns>The value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Max``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
            <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Single" /> value.</summary>
            <returns>The maximum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Min(Bindable.Linq.Interfaces.IBindableCollection{System.Decimal})">
            <summary>Returns the minimum value in a sequence of <see cref="T:System.Decimal" /> values.</summary>
            <returns>The minimum value in the sequence.</returns>
            <param name="source">A sequence of <see cref="T:System.Decimal" /> values to determine the minimum value of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Min(Bindable.Linq.Interfaces.IBindableCollection{System.Double})">
            <summary>Returns the minimum value in a sequence of <see cref="T:System.Double" /> values.</summary>
            <returns>The minimum value in the sequence.</returns>
            <param name="source">A sequence of <see cref="T:System.Double" /> values to determine the minimum value of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Min(Bindable.Linq.Interfaces.IBindableCollection{System.Nullable{System.Decimal}})">
            <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
            <returns>A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
            <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the minimum value of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Min(Bindable.Linq.Interfaces.IBindableCollection{System.Nullable{System.Double}})">
            <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Double" /> values.</summary>
            <returns>A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
            <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to determine the minimum value of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Min(Bindable.Linq.Interfaces.IBindableCollection{System.Nullable{System.Int32}})">
            <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
            <returns>A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
            <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to determine the minimum value of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Min(Bindable.Linq.Interfaces.IBindableCollection{System.Nullable{System.Int64}})">
            <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
            <returns>A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
            <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to determine the minimum value of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Min(Bindable.Linq.Interfaces.IBindableCollection{System.Nullable{System.Single}})">
            <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Single" /> values.</summary>
            <returns>A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
            <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to determine the minimum value of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Min(Bindable.Linq.Interfaces.IBindableCollection{System.Int32})">
            <summary>Returns the minimum value in a sequence of <see cref="T:System.Int32" /> values.</summary>
            <returns>The minimum value in the sequence.</returns>
            <param name="source">A sequence of <see cref="T:System.Int32" /> values to determine the minimum value of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Min(Bindable.Linq.Interfaces.IBindableCollection{System.Int64})">
            <summary>Returns the minimum value in a sequence of <see cref="T:System.Int64" /> values.</summary>
            <returns>The minimum value in the sequence.</returns>
            <param name="source">A sequence of <see cref="T:System.Int64" /> values to determine the minimum value of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Min(Bindable.Linq.Interfaces.IBindableCollection{System.Single})">
            <summary>Returns the minimum value in a sequence of <see cref="T:System.Single" /> values.</summary>
            <returns>The minimum value in the sequence.</returns>
            <param name="source">A sequence of <see cref="T:System.Single" /> values to determine the minimum value of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Min``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
            <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Decimal" /> value.</summary>
            <returns>The minimum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Min``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
            <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Double" /> value.</summary>
            <returns>The minimum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Min``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
            <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int64" /> value.</summary>
            <returns>The value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Min``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
            <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int32" /> value.</summary>
            <returns>The minimum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Min``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
            <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Double" /> value.</summary>
            <returns>The value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Min``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
            <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Single" /> value.</summary>
            <returns>The value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Min``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
            <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int64" /> value.</summary>
            <returns>The minimum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Min``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
            <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Decimal" /> value.</summary>
            <returns>The value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Min``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
            <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int32" /> value.</summary>
            <returns>The value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Min``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
            <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Single" /> value.</summary>
            <returns>The minimum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.All``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Determines whether all elements of a sequence satisfy a condition.
            </summary>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> that contains the elements to apply the predicate to.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>
            true if every element of the source sequence passes the test in the specified 
            predicate, or if the sequence is empty; otherwise, false.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Subtract(Bindable.Linq.Interfaces.IBindable{System.Int32},Bindable.Linq.Interfaces.IBindable{System.Int32})">
            <summary>
            Subtracts a bindable value from the current value and automatically wires up any dependencies.
            </summary>
            <param name="source">The source value to subtract.</param>
            <param name="toSubtract">To item to subtract.</param>
            <returns>
            A bindable value representing the result of the two items.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Subtract(Bindable.Linq.Interfaces.IBindable{System.Single},Bindable.Linq.Interfaces.IBindable{System.Single})">
            <summary>
            Subtracts a bindable value from the current value and automatically wires up any dependencies.
            </summary>
            <param name="source">The source value to subtract.</param>
            <param name="toSubtract">To item to subtract.</param>
            <returns>
            A bindable value representing the result of the two items.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Subtract(Bindable.Linq.Interfaces.IBindable{System.Decimal},Bindable.Linq.Interfaces.IBindable{System.Decimal})">
            <summary>
            Subtracts a bindable value from the current value and automatically wires up any dependencies.
            </summary>
            <param name="source">The source value to subtract.</param>
            <param name="toSubtract">To item to subtract.</param>
            <returns>
            A bindable value representing the result of the two items.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Subtract(Bindable.Linq.Interfaces.IBindable{System.Double},Bindable.Linq.Interfaces.IBindable{System.Double})">
            <summary>
            Subtracts a bindable value from the current value and automatically wires up any dependencies.
            </summary>
            <param name="source">The source value to subtract.</param>
            <param name="toSubtract">To item to subtract.</param>
            <returns>
            A bindable value representing the result of the two items.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Subtract(Bindable.Linq.Interfaces.IBindable{System.Int64},Bindable.Linq.Interfaces.IBindable{System.Int64})">
            <summary>
            Subtracts a bindable value from the current value and automatically wires up any dependencies.
            </summary>
            <param name="source">The source value to subtract.</param>
            <param name="toSubtract">To item to subtract.</param>
            <returns>
            A bindable value representing the result of the two items.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Cast``1(Bindable.Linq.Interfaces.IBindableCollection)">
            <summary>
            Converts the elements of an <see cref="T:Bindable.Linq.Interfaces.IBindableCollection"/> to the specified type.
            </summary>
            <typeparam name="TResult">The type to convert the elements of <paramref name="source"/> to.</typeparam>
            <param name="source">The <see cref="T:Bindable.Linq.Interfaces.IBindableCollection"/> that contains the elements to be converted.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> that contains each element of the source sequence converted to the specified type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidCastException">An element in the sequence cannot be cast to the required type.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.AsBindable``1(System.Collections.IEnumerable)">
            <summary>
            Converts any <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a Bindable LINQ <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/>. The <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/>
            interface is what allows the Bindable LINQ extensions to know whether to apply Bindable LINQ operations or the standard LINQ to Objects operations.
            </summary>
            <typeparam name="TSource">The type of source item.</typeparam>
            <param name="source">The source Iterator.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> containing the items.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <differences>This method is specific to Bindable LINQ and is not available in LINQ to Objects.</differences>
            <notimplemented>This method is not i    mplemented yet.</notimplemented>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.AsBindable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts any <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a Bindable LINQ <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/>.
            </summary>
            <typeparam name="TSource">The type of source item.</typeparam>
            <param name="source">The source Iterator.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> containing the items.
            </returns>
            <differences>This method is specific to Bindable LINQ and is not available in LINQ to Objects.</differences>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.AsBindable``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts any <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a Bindable LINQ <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/>.
            </summary>
            <typeparam name="TSource">The type of source item.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source Iterator.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> containing the items.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.AsBindable``1(System.Collections.IEnumerable,Bindable.Linq.Threading.IDispatcher)">
            <summary>
            Converts any <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a Bindable LINQ <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/>. The <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/>
            interface is what allows the Bindable LINQ extensions to know whether to apply Bindable LINQ operations or the standard LINQ to Objects operations.
            </summary>
            <typeparam name="TSource">The type of source item.</typeparam>
            <param name="source">The source Iterator.</param>
            <param name="dispatcher">The dispatcher.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> containing the items.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <differences>This method is specific to Bindable LINQ and is not available in LINQ to Objects.</differences>
            <notimplemented>This method is not implemented yet.</notimplemented>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.AsBindable``1(System.Collections.Generic.IEnumerable{``0},Bindable.Linq.Threading.IDispatcher)">
            <summary>
            Converts any <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a Bindable LINQ <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/>.
            </summary>
            <typeparam name="TSource">The type of source item.</typeparam>
            <param name="source">The source Iterator.</param>
            <param name="dispatcher">The dispatcher.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> containing the items.
            </returns>
            <differences>This method is specific to Bindable LINQ and is not available in LINQ to Objects.</differences>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.AsBindable``1(System.Collections.IEnumerable,System.Windows.Threading.Dispatcher)">
            <summary>
            Converts any <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a Bindable LINQ <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/>. The <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/>
            interface is what allows the Bindable LINQ extensions to know whether to apply Bindable LINQ operations or the standard LINQ to Objects operations.
            </summary>
            <typeparam name="TSource">The type of source item.</typeparam>
            <param name="source">The source Iterator.</param>
            <param name="dispatcher">The dispatcher.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> containing the items.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <differences>This method is specific to Bindable LINQ and is not available in LINQ to Objects.</differences>
            <notimplemented>This method is not implemented yet.</notimplemented>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.AsBindable``1(System.Collections.Generic.IEnumerable{``0},System.Windows.Threading.Dispatcher)">
            <summary>
            Converts any <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a Bindable LINQ <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/>.
            </summary>
            <typeparam name="TSource">The type of source item.</typeparam>
            <param name="source">The source Iterator.</param>
            <param name="dispatcher">The dispatcher.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> containing the items.
            </returns>
            <differences>This method is specific to Bindable LINQ and is not available in LINQ to Objects.</differences>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.AsBindable``2(System.Collections.Generic.IEnumerable{``0},Bindable.Linq.Threading.IDispatcher)">
            <summary>
            Converts any <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a Bindable LINQ <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/>.
            </summary>
            <typeparam name="TSource">The type of source item.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source Iterator.</param>
            <param name="dispatcher">The dispatcher.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> containing the items.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.AsBindable``2(System.Collections.Generic.IEnumerable{``0},System.Windows.Threading.Dispatcher)">
            <summary>
            Converts any <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a Bindable LINQ <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/>.
            </summary>
            <typeparam name="TSource">The type of source item.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source Iterator.</param>
            <param name="dispatcher">The dispatcher.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> containing the items.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.First``1(Bindable.Linq.Interfaces.IBindableCollection{``0})">
            <summary>Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
            <returns>default(<typeparamref name="TSource"/>) if <paramref name="source"/> is empty; otherwise, the first element in <paramref name="source"/>.</returns>
            <param name="source">The <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> to return the first element of.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.First``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</summary>
            <returns>default(<typeparamref name="TSource"/>) if <paramref name="source"/> is empty or if no element passes the test specified by <paramref name="predicate"/>; otherwise, the first element in <paramref name="source"/> that passes the test specified by <paramref name="predicate"/>.</returns>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.FirstOrDefault``1(Bindable.Linq.Interfaces.IBindableCollection{``0})">
            <summary>Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
            <returns>default(<typeparamref name="TSource"/>) if <paramref name="source"/> is empty; otherwise, the first element in <paramref name="source"/>.</returns>
            <param name="source">The <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> to return the first element of.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.FirstOrDefault``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</summary>
            <returns>default(<typeparamref name="TSource"/>) if <paramref name="source"/> is empty or if no element passes the test specified by <paramref name="predicate"/>; otherwise, the first element in <paramref name="source"/> that passes the test specified by <paramref name="predicate"/>.</returns>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.ThenBy``2(Bindable.Linq.Interfaces.IOrderedBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1"/> that contains elements to sort.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.ThenBy``2(Bindable.Linq.Interfaces.IOrderedBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1"/> that contains elements to sort.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.ThenBy``2(Bindable.Linq.Interfaces.IOrderedBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1"/> that contains elements to sort.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.ThenBy``2(Bindable.Linq.Interfaces.IOrderedBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1"/> that contains elements to sort.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.SelectMany``2(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,Bindable.Linq.Interfaces.IBindableCollection{``1}}})">
            <summary>
            Projects each element of a sequence to an <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> and flattens the resulting sequences into one sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the elements of the sequence returned by <paramref name="selector"/>.</typeparam>
            <param name="source">A sequence of values to project.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.SelectMany``2(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,Bindable.Linq.Interfaces.IBindableCollection{``1}}},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Projects each element of a sequence to an <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> and flattens the resulting sequences into one sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the elements of the sequence returned by <paramref name="selector"/>.</typeparam>
            <param name="source">A sequence of values to project.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.LastOrDefault``1(Bindable.Linq.Interfaces.IBindableCollection{``0})">
            <summary>Returns the last element of a sequence, or a default value if the sequence contains no elements.</summary>
            <returns>default(<typeparamref name="TSource"/>) if the source sequence is empty; otherwise, the last element in the <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/>.</returns>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> to return the last element of.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.LastOrDefault``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</summary>
            <returns>default(<typeparamref name="TSource"/>) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</returns>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Aggregate``2(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{Bindable.Linq.Interfaces.IBindableCollection{``0},``1}})">
            <summary>
            Applies an accumulator function over a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> to aggregate over.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <returns>The final accumulator value.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Aggregate``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{Bindable.Linq.Interfaces.IBindableCollection{``0},``0}})">
            <summary>
            Applies an accumulator function over a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> to aggregate over.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <returns>The final accumulator value.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Aggregate``2(Bindable.Linq.Interfaces.IBindableCollection{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
            <summary>
            Applies an accumulator function over a sequence. The specified seed value is used as the 
            initial accumulator value.
            </summary>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> to aggregate over.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <returns>The final accumulator value.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Aggregate``3(Bindable.Linq.Interfaces.IBindableCollection{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.
            </summary>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> to aggregate over.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <typeparam name="TResult">The type of the resulting value.</typeparam>
            <returns>The transformed final accumulator value.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Aggregate``3(Bindable.Linq.Interfaces.IBindableCollection{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <typeparam name="TResult">The type of the resulting value.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> to aggregate over.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>The transformed final accumulator value.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Aggregate``2(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{Bindable.Linq.Interfaces.IBindableCollection{``0},``1}},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Applies an accumulator function over a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> to aggregate over.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>The final accumulator value.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Aggregate``2(Bindable.Linq.Interfaces.IBindableCollection{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Applies an accumulator function over a sequence. The specified seed value is used as the
            initial accumulator value.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> to aggregate over.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>The final accumulator value.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Add(Bindable.Linq.Interfaces.IBindable{System.Int32},Bindable.Linq.Interfaces.IBindable{System.Int32})">
            <summary>
            Adds a bindable value to the current value and automatically wires up any dependencies.
            </summary>
            <param name="source">The source value to add.</param>
            <param name="toAdd">To item to add.</param>
            <returns>
            A bindable value representing the sum of the two items.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Add(Bindable.Linq.Interfaces.IBindable{System.Single},Bindable.Linq.Interfaces.IBindable{System.Single})">
            <summary>
            Adds a bindable value to the current value and automatically wires up any dependencies.
            </summary>
            <param name="source">The source value to add.</param>
            <param name="toAdd">To item to add.</param>
            <returns>
            A bindable value representing the sum of the two items.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Add(Bindable.Linq.Interfaces.IBindable{System.Decimal},Bindable.Linq.Interfaces.IBindable{System.Decimal})">
            <summary>
            Adds a bindable value to the current value and automatically wires up any dependencies.
            </summary>
            <param name="source">The source value to add.</param>
            <param name="toAdd">To item to add.</param>
            <returns>
            A bindable value representing the sum of the two items.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Add(Bindable.Linq.Interfaces.IBindable{System.Double},Bindable.Linq.Interfaces.IBindable{System.Double})">
            <summary>
            Adds a bindable value to the current value and automatically wires up any dependencies.
            </summary>
            <param name="source">The source value to add.</param>
            <param name="toAdd">To item to add.</param>
            <returns>
            A bindable value representing the sum of the two items.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Add(Bindable.Linq.Interfaces.IBindable{System.Int64},Bindable.Linq.Interfaces.IBindable{System.Int64})">
            <summary>
            Adds a bindable value to the current value and automatically wires up any dependencies.
            </summary>
            <param name="source">The source value to add.</param>
            <param name="toAdd">To item to add.</param>
            <returns>
            A bindable value representing the sum of the two items.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Union``1(Bindable.Linq.Interfaces.IBindableCollection{``0},Bindable.Linq.Interfaces.IBindableCollection{``0})">
            <summary>
            Produces the set union of two sequences by using the default equality comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
            <param name="first">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose distinct elements form the first set for the union.</param>
            <param name="second">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose distinct elements form the second set for the union.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> that contains the elements from both input sequences, excluding duplicates.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="first"/> or <paramref name="second"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Union``1(Bindable.Linq.Interfaces.IBindableCollection{``0},Bindable.Linq.Interfaces.IBindableCollection{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
            <param name="first">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose distinct elements form the first set for the union.</param>
            <param name="second">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose distinct elements form the second set for the union.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> that contains the elements from both input sequences, excluding duplicates.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="first"/> or <paramref name="second"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.ThenByDescending``2(Bindable.Linq.Interfaces.IOrderedBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1"/> that contains elements to sort.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted in descending order according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.ThenByDescending``2(Bindable.Linq.Interfaces.IOrderedBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1"/> that contains elements to sort.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted in descending order according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.ThenByDescending``2(Bindable.Linq.Interfaces.IOrderedBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1"/> that contains elements to sort.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted in descending order according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.ThenByDescending``2(Bindable.Linq.Interfaces.IOrderedBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1"/> that contains elements to sort.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted in descending order according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Concat``1(Bindable.Linq.Interfaces.IBindableCollection{``0},Bindable.Linq.Interfaces.IBindableCollection{``0})">
            <summary>
            Concatenates two sequences.
            </summary>
            <typeparam name="TElement">The type of the elements of the input sequences.</typeparam>
            <param name="first">The first sequence to concatenate.</param>
            <param name="second">The sequence to concatenate to the first sequence.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> that contains the concatenated elements of the two input sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="first"/> or <paramref name="second"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.SingleOrDefault``1(Bindable.Linq.Interfaces.IBindableCollection{``0})">
            <summary>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</summary>
            <returns>The single element of the input sequence, or default(<typeparamref name="TSource"/>) if the sequence contains no elements.</returns>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> to return the single element of.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The input sequence contains more than one element.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.SingleOrDefault``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</summary>
            <returns>The single element of the input sequence that satisfies the condition, or default(<typeparamref name="TSource"/>) if no such element is found.</returns>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">More than one element satisfies the condition in <paramref name="predicate"/>.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Any``1(Bindable.Linq.Interfaces.IBindableCollection{``0})">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <param name="source">The <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> to check for emptiness.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>true if the source sequence contains any elements; otherwise, false.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Any``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Determines whether any element of a sequence satisfies a condition.
            </summary>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements to apply the predicate to.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.OfType``1(Bindable.Linq.Interfaces.IBindableCollection)">
            <summary>
            Filters the elements of an <see cref="T:Bindable.Linq.Interfaces.IBindableCollection"/> based on a specified type.
            </summary>
            <typeparam name="TResult">The type to filter the elements of the sequence on.</typeparam>
            <param name="source">The <see cref="T:Bindable.Linq.Interfaces.IBindableCollection"/> whose elements to filter.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> that contains elements from the input sequence of type <typeparamref name="TResult"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Sum(Bindable.Linq.Interfaces.IBindableCollection{System.Double})">
            <summary>Computes the sum of a sequence of <see cref="T:System.Double" /> values.</summary>
            <returns>The sum of the values in the sequence.</returns>
            <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the sum of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Sum(Bindable.Linq.Interfaces.IBindableCollection{System.Nullable{System.Decimal}})">
            <summary>Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
            <returns>The sum of the values in the sequence.</returns>
            <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Sum(Bindable.Linq.Interfaces.IBindableCollection{System.Decimal})">
            <summary>Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.</summary>
            <returns>The sum of the values in the sequence.</returns>
            <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Sum(Bindable.Linq.Interfaces.IBindableCollection{System.Int32})">
            <summary>Computes the sum of a sequence of <see cref="T:System.Int32" /> values.</summary>
            <returns>The sum of the values in the sequence.</returns>
            <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Sum(Bindable.Linq.Interfaces.IBindableCollection{System.Int64})">
            <summary>Computes the sum of a sequence of <see cref="T:System.Int64" /> values.</summary>
            <returns>The sum of the values in the sequence.</returns>
            <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Sum(Bindable.Linq.Interfaces.IBindableCollection{System.Nullable{System.Double}})">
            <summary>Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.</summary>
            <returns>The sum of the values in the sequence.</returns>
            <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Sum(Bindable.Linq.Interfaces.IBindableCollection{System.Nullable{System.Int32}})">
            <summary>Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
            <returns>The sum of the values in the sequence.</returns>
            <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Sum(Bindable.Linq.Interfaces.IBindableCollection{System.Nullable{System.Int64}})">
            <summary>Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
            <returns>The sum of the values in the sequence.</returns>
            <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Sum(Bindable.Linq.Interfaces.IBindableCollection{System.Nullable{System.Single}})">
            <summary>Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.</summary>
            <returns>The sum of the values in the sequence.</returns>
            <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Sum(Bindable.Linq.Interfaces.IBindableCollection{System.Single})">
            <summary>Computes the sum of a sequence of <see cref="T:System.Single" /> values.</summary>
            <returns>The sum of the values in the sequence.</returns>
            <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the sum of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Sum``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
            <summary>Computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
            <returns>The sum of the projected values.</returns>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Sum``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
            <summary>Computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
            <returns>The sum of the projected values.</returns>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Sum``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
            <summary>Computes the sum of the sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
            <returns>The sum of the projected values.</returns>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Sum``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
            <summary>Computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
            <returns>The sum of the projected values.</returns>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Sum``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
            <summary>Computes the sum of the sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
            <returns>The sum of the projected values.</returns>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Sum``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
            <summary>Computes the sum of the sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
            <returns>The sum of the projected values.</returns>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Sum``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
            <summary>Computes the sum of the sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
            <returns>The sum of the projected values.</returns>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Sum``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
            <summary>Computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
            <returns>The sum of the projected values.</returns>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Sum``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
            <summary>Computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
            <returns>The sum of the projected values.</returns>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Sum``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
            <summary>Computes the sum of the sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
            <returns>The sum of the projected values.</returns>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Select``1(Bindable.Linq.Interfaces.IBindableCollection{``0})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements are the result of invoking the transform function on each element of <paramref name="source"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Select``2(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements are the result of invoking the transform function on each element of <paramref name="source"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Select``1(Bindable.Linq.Interfaces.IBindableCollection{``0},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements are the result of invoking the transform function on each element of <paramref name="source"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Select``2(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements are the result of invoking the transform function on each element of <paramref name="source"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.ToBindingList``1(Bindable.Linq.Interfaces.IBindableCollection{``0})">
            <summary>
            Converts a Bindable LINQ query into a <see cref="T:System.ComponentModel.IBindingList"/> compatible with Windows Forms and WPF.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="bindableCollection">The bindable collection.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Average(Bindable.Linq.Interfaces.IBindableCollection{System.Decimal})">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Decimal" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.</param>
            <returns>The average of the sequence of values.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Average(Bindable.Linq.Interfaces.IBindableCollection{System.Nullable{System.Decimal}})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.</param>
            <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Average(Bindable.Linq.Interfaces.IBindableCollection{System.Nullable{System.Double}})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.</param>
            <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Average(Bindable.Linq.Interfaces.IBindableCollection{System.Nullable{System.Int32}})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Int32" />values to calculate the average of.</param>
            <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Average(Bindable.Linq.Interfaces.IBindableCollection{System.Nullable{System.Int64}})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.</param>
            <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Average(Bindable.Linq.Interfaces.IBindableCollection{System.Nullable{System.Single}})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
            <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.</param>
            <returns>
            The average of the sequence of values, or null if the source sequence is empty or contains 
            only values that are null.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Average(Bindable.Linq.Interfaces.IBindableCollection{System.Double})">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Double" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the average of.</param>
            <returns>
            The average of the sequence of values.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Average(Bindable.Linq.Interfaces.IBindableCollection{System.Int32})">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Int32" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the average of.</param>
            <returns>The average of the sequence of values.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Average(Bindable.Linq.Interfaces.IBindableCollection{System.Int64})">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Int64" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the average of.</param>
            <returns>The average of the sequence of values.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Average(Bindable.Linq.Interfaces.IBindableCollection{System.Single})">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Single" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the average of.</param>
            <returns>The average of the sequence of values.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Average``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Decimal" /> values that are 
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of values that are used to calculate an average.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>The average of the sequence of values.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Average``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Double" /> values that are obtained 
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>The average of the sequence of values.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Average``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Int32" /> values that are 
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>The average of the sequence of values.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Average``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Int64" /> values that are obtained 
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <returns>The average of the sequence of values.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Average``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Average``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Average``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Average``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that are 
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Average``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
            <summary>Computes the average of a sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
            <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Average``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
            <summary>Computes the average of a sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
            <returns>The average of the sequence of values.</returns>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="source" /> contains no elements.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.OrderByDescending``2(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted in descending order according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.OrderByDescending``2(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in descending order by using a specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted in descending order according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.OrderByDescending``2(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted in descending order according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.OrderByDescending``2(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Sorts the elements of a sequence in descending order by using a specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted in descending order according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.OrderBy``2(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.OrderBy``2(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in ascending order by using a specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.OrderBy``2(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.OrderBy``2(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Sorts the elements of a sequence in ascending order by using a specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.ElementAtOrDefault``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Int32)">
            <summary>Returns the element at a specified index in a sequence or a default value if the index is out of range.</summary>
            <returns>default(<typeparamref name="TSource"/>) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</returns>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> to return an element from.</param>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Distinct``1(Bindable.Linq.Interfaces.IBindableCollection{``0})">
            <summary>
            Returns distinct elements from a sequence by using the default equality comparer to compare values.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> that contains distinct elements from the source sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Distinct``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> that contains distinct elements from the source sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Single``1(Bindable.Linq.Interfaces.IBindableCollection{``0})">
            <summary>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</summary>
            <returns>The single element of the input sequence.</returns>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> to return the single element of.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The input sequence contains more than one element.-or-The input sequence is empty.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Single``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</summary>
            <returns>The single element of the input sequence that satisfies a condition.</returns>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate"/>.-or-More than one element satisfies the condition in <paramref name="predicate"/>.-or-The source sequence is empty.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Where``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Bindable LINQ: Filters a sequence of values based on a predicate, and automatically detects dependencies. Each item will be re-evaluated if it raises a property changed event, or if any properties
            accessed in the filter expression raise events. Items will be re-evaluated when the source collection raises CollectionChanged events. The entire collection
            will be re-evaluated if the source collection raises a Reset event, or if any addtional dependencies added via the <see cref="!:WithDependencies&lt;TResult&gt;"/>
            extension method tell it to re-evaluate.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> to filter.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> that contains elements from the input sequence that satisfy the condition.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Where``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Bindable LINQ: Filters a sequence of values based on a predicate. Each item will be re-evaluated if it raises a property changed event, or if any properties
            accessed in the filter expression raise events. Items will be re-evaluated when the source collection raises CollectionChanged events. The entire collection
            will be re-evaluated if the source collection raises a Reset event, or if any addtional dependencies added via the <see cref="!:WithDependencies&lt;TResult&gt;"/>
            extension method tell it to re-evaluate.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> to filter.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> that contains elements from the input sequence that satisfy the condition.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Switch``1(Bindable.Linq.Interfaces.IBindable{``0})">
            <summary>
            Checks a condition on a specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Case``2(Bindable.Linq.Operators.ISwitchDeclaration{``0},``0,``1)">
            <summary>
            Adds a case to the current switch statement.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="switchDeclaration">The switch declaration.</param>
            <param name="condition">The condition.</param>
            <param name="result">The result.</param>
            <returns>The switch statement.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Case``2(Bindable.Linq.Operators.ISwitchDeclaration{``0},``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Adds a case to the current switch statement.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="switchDeclaration">The switch declaration.</param>
            <param name="condition">The condition.</param>
            <param name="result">The result.</param>
            <returns>The switch statement.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Case``2(Bindable.Linq.Operators.ISwitchDeclaration{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``1)">
            <summary>
            Adds a case to the current switch statement.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="switchDeclaration">The switch declaration.</param>
            <param name="condition">The condition.</param>
            <param name="result">The result.</param>
            <returns>The switch statement.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Case``2(Bindable.Linq.Operators.ISwitchDeclaration{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Adds a case to the current switch statement.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="switchDeclaration">The switch declaration.</param>
            <param name="condition">The condition.</param>
            <param name="result">The result.</param>
            <returns>The switch statement.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Default``2(Bindable.Linq.Operators.ISwitchDeclaration{``0},``1)">
            <summary>
            Sets the default case for the current switch statement.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="switchDeclaration">The switch declaration.</param>
            <param name="result">The result.</param>
            <returns>The switch statement.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Default``2(Bindable.Linq.Operators.ISwitchDeclaration{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sets the default case for the current switch statement.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="switchDeclaration">The switch declaration.</param>
            <param name="result">The result.</param>
            <returns>The switch statement.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Case``2(Bindable.Linq.Operators.ISwitch{``0,``1},``0,``1)">
            <summary>
            Adds a case to the current switch statement.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="currentSwitch">The current switch.</param>
            <param name="condition">The condition.</param>
            <param name="result">The result.</param>
            <returns>The switch statement.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Case``2(Bindable.Linq.Operators.ISwitch{``0,``1},``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Adds a case to the current switch statement.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="currentSwitch">The current switch.</param>
            <param name="condition">The condition.</param>
            <param name="result">The result.</param>
            <returns>The switch statement.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Case``2(Bindable.Linq.Operators.ISwitch{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``1)">
            <summary>
            Adds a case to the current switch statement.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="currentSwitch">The current switch.</param>
            <param name="condition">The condition.</param>
            <param name="result">The result.</param>
            <returns>The switch statement.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Case``2(Bindable.Linq.Operators.ISwitch{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Adds a case to the current switch statement.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="currentSwitch">The current switch.</param>
            <param name="condition">The condition.</param>
            <param name="result">The result.</param>
            <returns>The switch statement.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Default``2(Bindable.Linq.Operators.ISwitch{``0,``1},``1)">
            <summary>
            Sets the default case for the current switch statement.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="currentSwitch">The current switch.</param>
            <param name="result">The result.</param>
            <returns>The switch statement.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Default``2(Bindable.Linq.Operators.ISwitch{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sets the default case for the current switch statement.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="currentSwitch">The current switch.</param>
            <param name="result">The result.</param>
            <returns>The switch statement.</returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.EndSwitch``2(Bindable.Linq.Operators.ISwitch{``0,``1})">
            <summary>
            Ends the switch.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="currentSwitch">The current switch.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Count``1(Bindable.Linq.Interfaces.IBindableCollection{``0})">
            <summary>Returns the number of elements in a sequence.</summary>
            <returns>The number of elements in the input sequence.</returns>
            <param name="source">A sequence that contains elements to be counted.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
            <exception cref="T:System.OverflowException">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Count``1(Bindable.Linq.Interfaces.IBindableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>Returns a number that represents how many elements in the specified sequence satisfy a condition.</summary>
            <returns>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</returns>
            <param name="source">A sequence that contains elements to be tested and counted.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
            <exception cref="T:System.OverflowException">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Contains``1(Bindable.Linq.Interfaces.IBindableCollection{``0},``0)">
            <summary>Determines whether a sequence contains a specified element by using the default equality comparer.</summary>
            <returns>true if the source sequence contains an element that has the specified value; otherwise, false.</returns>
            <param name="source">A sequence in which to locate a value.</param>
            <param name="value">The value to locate in the sequence.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Contains``1(Bindable.Linq.Interfaces.IBindableCollection{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Determines whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
            <returns>true if the source sequence contains an element that has the specified value; otherwise, false.</returns>
            <param name="source">A sequence in which to locate a value.</param>
            <param name="value">The value to locate in the sequence.</param>
            <param name="comparer">An equality comparer to compare values.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.UnionAll``1(Bindable.Linq.Interfaces.IBindableCollection{Bindable.Linq.Interfaces.IBindableCollection{``0}})">
            <summary>
            Produces the set union of multiple sequences.
            </summary>
            <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
            <param name="sources">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements are also <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> of the elements to be combined.</param>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> that contains the elements from both input sequences, excluding duplicates.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> is null.</exception>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Project``2(Bindable.Linq.Interfaces.IBindable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Projects a single bindable object into another bindable object, using a lambda to select the new
            type of object.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source colection.</param>
            <param name="projector">The projector function used to turn the source type into the result type.</param>
            <returns>
            An object created by the <paramref name="projector"/>. If the source value changes, the item will be projected again.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Project``2(Bindable.Linq.Interfaces.IBindable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},Bindable.Linq.DependencyDiscovery)">
            <summary>
            Projects a single bindable object into another bindable object, using a lambda to select the new
            type of object.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source colection.</param>
            <param name="projector">The projector function used to turn the source type into the result type.</param>
            <param name="dependencyAnalysisMode">The dependency analysis mode.</param>
            <returns>
            An object created by the <paramref name="projector"/>. If the source value changes, the item will be projected again.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.Into``3(Bindable.Linq.Interfaces.IBindableCollection{Bindable.Linq.Interfaces.IBindableGrouping{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,Bindable.Linq.Interfaces.IBindableCollection{``1},``2}})">
            <summary>
            Projects the groups from a GroupBy into a new element type.
            </summary>
            <typeparam name="TKey">The type of the key returned by <paramref name="resultSelector"/>.</typeparam>
            <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2"/>.</typeparam>
            <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector"/>.</typeparam>
            <param name="source">An <see cref="T:Bindable.Linq.Interfaces.IBindableCollection`1"/> whose elements to group.</param>
            <param name="resultSelector">A function to create a result value from each group.</param>
            <returns>
            A collection of elements of type <typeparamref name="TResult"/> where each element represents a projection over a group and its key.
            </returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.DependsOnExpression``1(``0,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Extracts dependencies from the given expression and adds them to the iterator.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">The query.</param>
            <param name="expression">The expression.</param>
            <param name="itemParameter">The item parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.DependsOn``1(``0,System.Object,System.String)">
            <summary>
            Adds a dependency for a given property on a given object external to the query.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">The query.</param>
            <param name="externalObject">The external object to monitor for changes. For example, this could be a regular 
            class object, an object that implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>, or a Windows Forms control.</param>
            <param name="propertyPath">The property path. For example: "HomeAddress.Postcode".</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.DependsOn``1(``0,System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Adds a dependency on a WPF dependency object.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">The query.</param>
            <param name="dependencyObject">A WPF dependency object.</param>
            <param name="dependencyProperty">A WPF dependency property.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.DependsOn``1(``0,System.String)">
            <summary>
            Adds a dependency on items in the source collection, given the path to a property.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">The query.</param>
            <param name="propertyPath">The property name or path. For example: "HomeAddress.Postcode".</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.DependsOn``1(``0,Bindable.Linq.Dependencies.IDependencyDefinition)">
            <summary>
            Adds a dependency to the Bindable LINQ query given a dependency definition. This allows developers to create custom 
            dependency types by implementing the <see cref="T:Bindable.Linq.Dependencies.IDependencyDefinition"/> interface.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">The query.</param>
            <param name="definition">The definition.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.BindableEnumerable.DependsOn``1(``0,System.Collections.Generic.IEnumerable{Bindable.Linq.Dependencies.IDependencyDefinition})">
            <summary>
            Adds a set of dependencies to the Bindable LINQ query.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">The query.</param>
            <param name="definitions">The definitions.</param>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionAnalyzer">
            <summary>
            A factory for extracting dependencies from LINQ expression trees.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Dependencies.ExpressionAnalysis.IExpressionAnalyzer">
            <summary>
            Implemented by classes that can parse LINQ expression trees and extract dependencies from them.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.IExpressionAnalyzer.DiscoverDependencies(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Extracts the dependencies.
            </summary>
            <param name="expression">The expression.</param>
            <param name="itemParameter">The item parameter.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionAnalyzer.#ctor(Bindable.Linq.Dependencies.ExpressionAnalysis.Extractors.IDependencyExtractor[])">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionAnalyzer"/> class.
            </summary>
            <param name="extractors">The extractors.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionAnalyzer.DiscoverDependencies(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Extracts the dependencies.
            </summary>
            <param name="expression">The expression.</param>
            <param name="itemParameter">The item parameter.</param>
        </member>
        <member name="T:Bindable.Linq.Dependencies.ExpressionAnalysis.Extractors.DependencyExtractor">
            <summary>
            Serves as a base class for dependency extractors that create dependencies against properties. 
            These dependencies have one thing in common: They only look for MemberAccess expressions, and 
            the type of dependency depends on what the root of the expression is.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Dependencies.ExpressionAnalysis.Extractors.IDependencyExtractor">
            <summary>
            Implemented by objects which analyse expressions and extract dependencies.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.Extractors.IDependencyExtractor.Extract(System.Linq.Expressions.Expression)">
            <summary>
            Extracts any dependencies within the specified LINQ expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.Extractors.DependencyExtractor.Extract(System.Linq.Expressions.Expression)">
            <summary>
            Extracts any dependencies within the specified LINQ expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.Extractors.DependencyExtractor.ExtractFromRoot(System.Linq.Expressions.Expression,System.String)">
            <summary>
            When overridden in a derived class, extracts the appropriate dependency from the root of the expression.
            </summary>
            <param name="rootExpression">The root expression.</param>
            <param name="propertyPath">The property path.</param>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Dependencies.Definitions.StaticDependencyDefinition">
            <summary>
            Defines a dependency on a static property or member.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Dependencies.IDependencyDefinition">
            <summary>
            This interface is implemented by items that represent a dependency.
            </summary>
            <remarks>
            Dependency definitions follow the visitor pattern. All SyncLINQ operations implement the 
            <see cref="T:Bindable.Linq.Dependencies.IDependencyDefinition"/> interface, which allows you to pass dependency definitions to them. 
            Depending on the type of the operation, the dependency will ask you to either construct the dependency for 
            a collection of items (in the case of Aggregators or Iterators), or for a single object (in the case of 
            Operators).
            </remarks>
        </member>
        <member name="M:Bindable.Linq.Dependencies.IDependencyDefinition.AppliesToCollections">
            <summary>
            Determines whether this instance can construct dependencies for a collection.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.IDependencyDefinition.AppliesToSingleElement">
            <summary>
            Determines whether this instance can construct dependencies for a single element.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.IDependencyDefinition.ConstructForCollection``1(Bindable.Linq.Interfaces.IBindableCollection{``0},Bindable.Linq.Dependencies.PathNavigation.IPathNavigator)">
            <summary>
            Constructs the dependency for a collection of elements.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="sourceElements">The source elements.</param>
            <param name="pathNavigator">The path navigator.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.IDependencyDefinition.ConstructForElement``1(``0,Bindable.Linq.Dependencies.PathNavigation.IPathNavigator)">
            <summary>
            Constructs a dependency for a single element.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="sourceElement">The source element.</param>
            <param name="pathNavigator">The path navigator.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Definitions.StaticDependencyDefinition.#ctor(System.String,System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Dependencies.Definitions.StaticDependencyDefinition"/> class.
            </summary>
            <param name="propertyPath">The property path.</param>
            <param name="member">The member.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Definitions.StaticDependencyDefinition.AppliesToCollections">
            <summary>
            Determines whether this instance can construct dependencies for a collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Definitions.StaticDependencyDefinition.AppliesToSingleElement">
            <summary>
            Determines whether this instance can construct dependencies for a single element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Definitions.StaticDependencyDefinition.ConstructForCollection``1(Bindable.Linq.Interfaces.IBindableCollection{``0},Bindable.Linq.Dependencies.PathNavigation.IPathNavigator)">
            <summary>
            Constructs the dependency for a collection of elements.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="sourceElements">The source elements.</param>
            <param name="pathNavigator">The path navigator.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Definitions.StaticDependencyDefinition.ConstructForElement``1(``0,Bindable.Linq.Dependencies.PathNavigation.IPathNavigator)">
            <summary>
            Constructs a dependency for a single element.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="sourceElement">The source element.</param>
            <param name="pathNavigator">The path navigator.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Definitions.StaticDependencyDefinition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Bindable.Linq.Dependencies.Definitions.StaticDependencyDefinition.Member">
            <summary>
            Gets or sets the member.
            </summary>
            <value>The member.</value>
        </member>
        <member name="P:Bindable.Linq.Dependencies.Definitions.StaticDependencyDefinition.PropertyPath">
            <summary>
            Gets or sets the property path.
            </summary>
            <value>The property path.</value>
        </member>
        <member name="T:Bindable.Linq.Helpers.StateScope">
            <summary>
            This class is used to suppress events and to temporarily set property values. It is necessary 
            because when suppressing things like events using simple boolean flags, if one thread 
            suppresses it, then another suppresses, the first will then release while the other is still 
            running - leading to some inconsistent runtime behavior. 
            </summary>
            <remarks>
            <example>
            private StateScope _collectionChangedSuspension;
            
            using (_collectionChangedSuspension.Enter()) 
            {
                // Do stuff
            } // Will "Leave()" automatically
            
            StateScope isLoadingState = _loadingState.Enter();
            // Do stuff
            isLoadingState.Leave();
            </example>
            </remarks>
        </member>
        <member name="M:Bindable.Linq.Helpers.StateScope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Helpers.StateScope"/> class.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Helpers.StateScope.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Helpers.StateScope"/> class.
            </summary>
            <param name="callback">A callback called when the state's IsWithin property changes.</param>
        </member>
        <member name="M:Bindable.Linq.Helpers.StateScope.Enter">
            <summary>
            Enters this state scope.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Helpers.StateScope.Leave">
            <summary>
            Leaves this state scope.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Helpers.StateScope.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Helpers.StateScope.IsWithin">
            <summary>
            Gets a value indicating whether anyone is currently within this state scope.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Iterators.ProjectionRegister`2">
            <summary>
            A lookup for projections.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Iterators.ProjectionRegister`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Iterators.ProjectionRegister`2"/> class.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Iterators.ProjectionRegister`2.Store(`0,`1)">
            <summary>
            Remembers a projection from the source type to the result type.
            </summary>
            <param name="source">The source type.</param>
            <param name="result">The result type.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.ProjectionRegister`2.HasExistingProjection(`0)">
            <summary>
            Determines whether a projection already exists for the given source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.ProjectionRegister`2.InnerGetExistingProjection(`0)">
            <summary>
            Gets an existing projection.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Iterators.ProjectionRegister`2.ReProject(`0)">
            <summary>
            Recalls a previous projection from the source type to the result type.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Iterators.ProjectionRegister`2.Project(`0)">
            <summary>
            Recalls a previous projection from the source type to the result type.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Iterators.ProjectionRegister`2.CreateOrGetProjections(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Projects the range of elements.
            </summary>
            <param name="range">The range.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Iterators.ProjectionRegister`2.GetProjections(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Gets a range of already existing projections for items.
            </summary>
            <param name="range">The range.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Iterators.ProjectionRegister`2.Remove(`0)">
            <summary>
            Removes the specified source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.ProjectionRegister`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the range.
            </summary>
            <param name="sourceItems">The source items.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.ProjectionRegister`2.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Iterators.ProjectionRegister`2.GetExistingProjection(`0)">
            <summary>
            Gets the existing projection.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Iterators.ProjectionRegister`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Iterators.ProjectionRegister`2.ProjectionLock">
            <summary>
            Gets the projection lock.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Iterators.ProjectionRegister`2.Projections">
            <summary>
            Gets the projections store.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Aggregators.Numerics.Int64NullNumeric">
            <summary>
            Provides a numeric operations wrapper for nullable long types.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Aggregators.Numerics.INumeric`2">
            <summary>
            Implementers of this interface provide a helpful wrapper around numeric functions.
            Numeric types (integers, doubles, etc.) don't implement a common interface for numeric operations
            (adding, dividing, etc.). To provide generic implementations of bindable aggregates such as Sum,
            Min and Max, we use implementations of this interface to wrap these common operations.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="TAverageResult">The type of the result when averaging.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.INumeric`2.Sum(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Given a list of items, adds them and returns the sum.
            </summary>
            <param name="itemsToSum">The items to sum.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.INumeric`2.Average(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Given a list of items, computes the average value.
            </summary>
            <param name="items">The items to average.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.INumeric`2.Min(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Given a list of items, returns the lowest value.
            </summary>
            <param name="items">The items to locate the minimum value in.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.INumeric`2.Max(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Given a list of items, returns the highest value.
            </summary>
            <param name="items">The items to locate the maximum value in.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.Int64NullNumeric.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Given a list of sourceCollection, adds them and returns the sum.
            </summary>
            <param name="sourceCollection">The sourceCollection to sum.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.Int64NullNumeric.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Given a list of sourceCollection, computes the average value.
            </summary>
            <param name="sourceCollection">The sourceCollection to average.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.Int64NullNumeric.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Given a list of sourceCollection, returns the lowest value.
            </summary>
            <param name="sourceCollection">The sourceCollection to locate the minimum value in.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.Int64NullNumeric.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Given a list of sourceCollection, returns the highest value.
            </summary>
            <param name="sourceCollection">The sourceCollection to locate the maximum value in.</param>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Aggregators.Numerics.DecimalNullNumeric">
            <summary>
            Provides a numeric operations wrapper for nullable decimal types.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.DecimalNullNumeric.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Given a list of sourceCollection, adds them and returns the sum.
            </summary>
            <param name="sourceCollection">The sourceCollection to sum.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.DecimalNullNumeric.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Given a list of sourceCollection, computes the average value.
            </summary>
            <param name="sourceCollection">The sourceCollection to average.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.DecimalNullNumeric.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Given a list of sourceCollection, returns the lowest value.
            </summary>
            <param name="sourceCollection">The sourceCollection to locate the minimum value in.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.DecimalNullNumeric.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Given a list of sourceCollection, returns the highest value.
            </summary>
            <param name="sourceCollection">The sourceCollection to locate the maximum value in.</param>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1">
            <summary>
            Converts Bindable LINQ bindable collection result sets into IBindingList implementations compatible with 
            Windows Forms.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.#ctor(Bindable.Linq.Interfaces.IBindableCollection{`0},Bindable.Linq.Threading.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Adds the <see cref="T:System.ComponentModel.PropertyDescriptor"/> to the indexes used for searching.
            </summary>
            <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> to add to the indexes used for searching.</param>
        </member>
        <member name="M:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.AddNew">
            <summary>
            Adds a new item to the list.
            </summary>
            <returns>The item added to the list.</returns>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.ComponentModel.IBindingList.AllowNew"/> is false. </exception>
        </member>
        <member name="M:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the list based on a <see cref="T:System.ComponentModel.PropertyDescriptor"/> and a <see cref="T:System.ComponentModel.ListSortDirection"/>.
            </summary>
            <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> to sort by.</param>
            <param name="direction">One of the <see cref="T:System.ComponentModel.ListSortDirection"/> values.</param>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.ComponentModel.IBindingList.SupportsSorting"/> is false. </exception>
        </member>
        <member name="M:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Returns the index of the row that has the given <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            </summary>
            <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> to search on.</param>
            <param name="key">The value of the <paramref name="property"/> parameter to search for.</param>
            <returns>
            The index of the row that has the given <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.ComponentModel.IBindingList.SupportsSearching"/> is false. </exception>
        </member>
        <member name="M:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Removes the <see cref="T:System.ComponentModel.PropertyDescriptor"/> from the indexes used for searching.
            </summary>
            <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"/> to remove from the indexes used for searching.</param>
        </member>
        <member name="M:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.RemoveSort">
            <summary>
            Removes any sort applied using <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.ComponentModel.IBindingList.SupportsSorting"/> is false. </exception>
        </member>
        <member name="M:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
        </member>
        <member name="M:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only. </exception>
        </member>
        <member name="M:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"/> to insert into the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.</exception>
        </member>
        <member name="M:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to remove from the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
        </member>
        <member name="M:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.IList"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
        </member>
        <member name="M:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero. </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or- <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>. </exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>. </exception>
        </member>
        <member name="M:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ListChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.BeforeDisposeOverride">
            <summary>
            Called just before the object is disposed and all event subscriptions are released.
            </summary>
        </member>
        <member name="E:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.ListChanged">
            <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.AllowEdit">
            <summary>
            Gets whether you can update items in the list.
            </summary>
            <value></value>
            <returns>true if you can update the items in the list; otherwise, false.</returns>
        </member>
        <member name="P:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.AllowNew">
            <summary>
            Gets whether you can add items to the list using <see cref="M:System.ComponentModel.IBindingList.AddNew"/>.
            </summary>
            <value></value>
            <returns>true if you can add items to the list using <see cref="M:System.ComponentModel.IBindingList.AddNew"/>; otherwise, false.</returns>
        </member>
        <member name="P:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.AllowRemove">
            <summary>
            Gets whether you can remove items from the list, using <see cref="M:System.Collections.IList.Remove(System.Object)"/> or <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"/>.
            </summary>
            <value></value>
            <returns>true if you can remove items from the list; otherwise, false.</returns>
        </member>
        <member name="P:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.IsSorted">
            <summary>
            Gets whether the items in the list are sorted.
            </summary>
            <value></value>
            <returns>true if <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)"/> has been called and <see cref="M:System.ComponentModel.IBindingList.RemoveSort"/> has not been called; otherwise, false.</returns>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.ComponentModel.IBindingList.SupportsSorting"/> is false. </exception>
        </member>
        <member name="P:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.SortDirection">
            <summary>
            Gets the direction of the sort.
            </summary>
            <value></value>
            <returns>One of the <see cref="T:System.ComponentModel.ListSortDirection"/> values.</returns>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.ComponentModel.IBindingList.SupportsSorting"/> is false. </exception>
        </member>
        <member name="P:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.SortProperty">
            <summary>
            Gets the <see cref="T:System.ComponentModel.PropertyDescriptor"/> that is being used for sorting.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.ComponentModel.PropertyDescriptor"/> that is being used for sorting.</returns>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.ComponentModel.IBindingList.SupportsSorting"/> is false. </exception>
        </member>
        <member name="P:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.SupportsChangeNotification">
            <summary>
            Gets whether a <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> event is raised when the list changes or an item in the list changes.
            </summary>
            <value></value>
            <returns>true if a <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> event is raised when the list changes or when an item changes; otherwise, false.</returns>
        </member>
        <member name="P:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.SupportsSearching">
            <summary>
            Gets whether the list supports searching using the <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)"/> method.
            </summary>
            <value></value>
            <returns>true if the list supports searching using the <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)"/> method; otherwise, false.</returns>
        </member>
        <member name="P:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.SupportsSorting">
            <summary>
            Gets whether the list supports sorting.
            </summary>
            <value></value>
            <returns>true if the list supports sorting; otherwise, false.</returns>
        </member>
        <member name="P:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.</returns>
        </member>
        <member name="P:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Bindable.Linq.Adapters.Outgoing.BindingListAdapter`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</returns>
        </member>
        <member name="T:Bindable.Linq.Dependencies.EventDependency`2">
            <summary>
            A base class for managing weak-reference event subscriptions on multiple objects,
            ensuring:
            - The event isn't subscribed twice on the one object
            - All subscriptions can be easily cleared
            </summary>
            <typeparam name="TPublisher">The type of event publisher.</typeparam>
            <typeparam name="TEventArgs">The type of event argument.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Dependencies.EventDependency`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Dependencies.EventDependency`2"/> class.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.EventDependency`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.EventDependency`2.AttachOverride(`0)">
            <summary>
            When overriden in a derived class, allows the class to subscribe a given event handler to 
            the publishing class.
            </summary>
            <param name="publisher">The event publisher.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.EventDependency`2.DetachOverride(`0)">
            <summary>
            When overriden in a derived class, allows the class to unsubscribe a given event handler from 
            the publishing class.
            </summary>
            <param name="publisher">The event publisher.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.EventDependency`2.AttachRange(System.Collections.IEnumerable)">
            <summary>
            Attaches a range of objects to observe.
            </summary>
            <param name="range">The range of objects.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.EventDependency`2.Attach(System.Object)">
            <summary>
            Attaches an object to observe.
            </summary>
            <param name="objectToObserve">The object to be observed.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.EventDependency`2.DetachRange(System.Collections.IEnumerable)">
            <summary>
            Detaches a range of objects that were observed.
            </summary>
            <param name="range">The range of objects.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.EventDependency`2.Detach(System.Object)">
            <summary>
            Detaches an object that was observed.
            </summary>
            <param name="objectThatWasObserved">The object that was observed.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.EventDependency`2.Detach(System.Object,System.Boolean)">
            <summary>
            Detaches an object that was observed.
            </summary>
            <param name="objectThatWasObserved">The object that was observed.</param>
            <param name="remove">Whether to also remove the item.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.EventDependency`2.Clear">
            <summary>
            Clears all event subscriptions.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.EventDependency`2.DisposeOverride">
            <summary>
            When overridden in a derived class, allows the class to add custom code when the object is disposed.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Aggregators.Numerics.FloatNumeric">
            <summary>
            Provides a numeric operations wrapper for float types.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.FloatNumeric.Sum(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Given a list of sourceCollection, adds them and returns the sum.
            </summary>
            <param name="sourceCollection">The sourceCollection to sum.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.FloatNumeric.Average(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Given a list of sourceCollection, computes the average value.
            </summary>
            <param name="sourceCollection">The sourceCollection to average.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.FloatNumeric.Min(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Given a list of sourceCollection, returns the lowest value.
            </summary>
            <param name="sourceCollection">The sourceCollection to locate the minimum value in.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.FloatNumeric.Max(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Given a list of sourceCollection, returns the highest value.
            </summary>
            <param name="sourceCollection">The sourceCollection to locate the maximum value in.</param>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Operators.SwitchCase`2">
            <summary>
            Represents a case in a switch operation.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="T:Bindable.Linq.Operators.ISwitchCase`2">
            <summary>
            Represents an instance of a case in a switch statement.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Operators.ISwitchCase`2.Evaluate(`0)">
            <summary>
            Evaluates the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Operators.ISwitchCase`2.Return(`0)">
            <summary>
            Returns the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Operators.SwitchCase`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Operators.SwitchCase`2"/> class.
            </summary>
            <param name="inputCondition">The input condition.</param>
            <param name="resultExpression">The result expression.</param>
        </member>
        <member name="M:Bindable.Linq.Operators.SwitchCase`2.Evaluate(`0)">
            <summary>
            Evaluates the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Operators.SwitchCase`2.Return(`0)">
            <summary>
            Returns the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Collections.BindableCollection`1">
            <summary>
            This class is used as the primary implementation of a bindable collection. Most of the Iterators
            in Bindable LINQ use this class eventually to store their bindable results, as it abstracts a lot of the 
            logic around adding, replacing, moving and removing collections of items and raising the correct 
            events. It is similar to the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> in most ways, but provides 
            additional functionality.
            </summary>
            <typeparam name="TElement">The type of item held within the collection.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableCollection`1.#ctor(Bindable.Linq.Threading.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Collections.BindableCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableCollection`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items to the <see cref="T:Bindable.Linq.Collections.BindableCollection`1"/>.
            </summary>
            <param name="range">The items to add.</param>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableCollection`1.AddOrInsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds or inserts a range of items at a given index (which may be negative, in which case 
            the items will be added (appended to the end).
            </summary>
            <param name="index">The index to add the items at.</param>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:Bindable.Linq.Collections.BindableCollection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:Bindable.Linq.Collections.BindableCollection`1"/>.</param>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts a range of items into the <see cref="T:Bindable.Linq.Collections.BindableCollection`1"/>.
            </summary>
            <param name="index">The index to start inserting at.</param>
            <param name="range">The items to insert into the <see cref="T:Bindable.Linq.Collections.BindableCollection`1"/>.</param>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableCollection`1.InsertOrdered(`0,System.Comparison{`0})">
            <summary>
            Inserts an item so that it appears in order, using a given comparer.
            </summary>
            <param name="element">The element.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableCollection`1.Move(System.Int32,`0)">
            <summary>
            Moves an item to a new location within the collection.
            </summary>
            <param name="newIndex">The new index.</param>
            <param name="item">The item to move.</param>
            <remarks>
            Here is an example of how this logic works:
            Index     Start        Step 1       Step 2
            --------------------------------------------
            0:        Paul         Paul         Paul
            1:        Chuck        Larry        Larry
            2:        Larry        Timone       Timone
            3:        Timone       Pumba        Pumba
            4:        Pumba        Patrick      Chuck
            5:        Patrick                   Patrick
            Operation: Move "Chuck" from ix=1 to ix=4
            1) Remove "Chuck" - removedIndex = 1
            2) Insert "Chuck" - newIndex = 4
            </remarks>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableCollection`1.MoveOrdered(`0,System.Comparison{`0})">
            <summary>
            Moves an item to the correct place if it is no longer in the right place.
            </summary>
            <param name="element">The element.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableCollection`1.Replace(`0,`0)">
            <summary>
            Replaces a given item with another item.
            </summary>
            <param name="oldItem">The old item.</param>
            <param name="newItem">The new item.</param>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Bindable.Linq.Collections.BindableCollection`1"/>.
            </summary>
            <param name="element">The element.</param>
            <returns>
            true if <paramref name="element"/> was successfully removed from the <see cref="T:Bindable.Linq.Collections.BindableCollection`1"/>; otherwise, false. This method also returns false if <paramref name="element"/> is not found in the original <see cref="T:Bindable.Linq.Collections.BindableCollection`1"/>.
            </returns>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index in the <see cref="T:Bindable.Linq.Collections.BindableCollection`1"/>.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:Bindable.Linq.Collections.BindableCollection`1"/>.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Bindable.Linq.Collections.BindableCollection`1"/>. The 
            enumerator returned is a special kind of enumerator that allows the collection to be 
            modified even while it is being enumerated.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the <see cref="T:Bindable.Linq.Collections.BindableCollection`1"/> in a thread-safe way.
            </returns>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Bindable.Linq.Collections.BindableCollection`1"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the <see cref="T:Bindable.Linq.Collections.BindableCollection`1"/>.
            </returns>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Bindable.Linq.Collections.BindableCollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Bindable.Linq.Collections.BindableCollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:Bindable.Linq.Collections.BindableCollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Bindable.Linq.Collections.BindableCollection`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Bindable.Linq.Collections.BindableCollection`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableCollection`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Bindable.Linq.Collections.BindableCollection`1.PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableCollection`1.OnEvaluating(Bindable.Linq.Interfaces.Events.EvaluatingEventArgs{`0})">
            <summary>
            Raises the <see cref="E:Bindable.Linq.Collections.BindableCollection`1.Evaluating"/> event.
            </summary>
            <param name="e">The <see cref="T:Bindable.Linq.Interfaces.Events.EvaluatingEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Bindable.Linq.Collections.BindableCollection`1.CollectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Bindable.Linq.Collections.BindableCollection`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            <remarks>Warning: No locks should be held when raising this event.</remarks>
        </member>
        <member name="E:Bindable.Linq.Collections.BindableCollection`1.Evaluating">
            <summary>
            Occurs when the collection is being evaluated (GetEnumerator() is called) for the first time, just before it returns
            the results, to provide insight into the items being evaluated. This allows consumers to iterate the items in a collection
            just before they are returned to the caller, while still enabling delayed execution of queries.
            </summary>
        </member>
        <member name="E:Bindable.Linq.Collections.BindableCollection`1.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Collections.BindableCollection`1.InnerList">
            <summary>
            Gets the list used internally to store the items.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Collections.BindableCollection`1.HasPropertyChangedSubscribers">
            <summary>
            Gets a value indicating whether this instance has property changed subscribers.
            </summary>
            <value>
            	<c>true</c> if this instance has property changed subscribers; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Bindable.Linq.Collections.BindableCollection`1.HasEvaluated">
            <summary>
            Gets a value indicating whether this instance has already evaluated.
            </summary>
            <value>
            	<c>true</c> if this instance has evaluated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Bindable.Linq.Collections.BindableCollection`1.Item(System.Int32)">
            <summary>
            Gets the <typeparamref name="TElement"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Bindable.Linq.Collections.BindableCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Bindable.Linq.Collections.BindableCollection`1"/>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:Bindable.Linq.Collections.BindableCollection`1"/>.</returns>
        </member>
        <member name="T:Bindable.Linq.Helpers.LifetimeExtensions">
            <summary>
            Extensions for adding objects to a Lifetime Couplings manager.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Helpers.LifetimeExtensions.KeepAlive``1(``0,Bindable.Linq.Helpers.LifetimeCouplings)">
            <summary>
            Remembers the specified item for the lifetime of the host of the LifetimeCouplings object.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="item">The item.</param>
            <param name="lifetime">The lifetime.</param>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Dependencies.PathNavigation.Tokens.WpfMemberToken">
            <summary>
            A property monitor for WPF DependencyProperties.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Dependencies.PathNavigation.Tokens.MemberToken">
            <summary>
            A base class for objects that monitor a property.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Dependencies.PathNavigation.Tokens.IToken">
            <summary>
            This interface is implemented by objects which can monitor the property of a given object.
            </summary>
            <remarks>
            Property monitors are designed to be chained together to observe changes to objects and their properties.
            </remarks>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.IToken.AcquireTarget(System.Object)">
            <summary>
            Acquires the target.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="P:Bindable.Linq.Dependencies.PathNavigation.Tokens.IToken.NextToken">
            <summary>
            Gets the next monitor in the chain.
            </summary>
            <value>The next monitor.</value>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.MemberToken.#ctor(System.Object,System.String,System.String,System.Action{System.Object,System.String},Bindable.Linq.Dependencies.PathNavigation.IPathNavigator)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Dependencies.PathNavigation.Tokens.MemberToken"/> class.
            </summary>
            <param name="currentTarget">The current target.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="remainingPath">The remaining path.</param>
            <param name="changeDetectedCallback">The change detected callback.</param>
            <param name="traverser">The traverser.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.MemberToken.AcquireTarget(System.Object)">
            <summary>
            Acquires the target.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.MemberToken.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.MemberToken.DiscardCurrentTargetOverride">
            <summary>
            When overridden in a derived class, gives the class an opportunity to discard the current target.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.MemberToken.MonitorCurrentTargetOverride">
            <summary>
            When overridden in a derived class, gives the class an opportunity to monitor the current target.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.MemberToken.ReadCurrentPropertyValueOverride">
            <summary>
            When overriden in a derived class, gets the value of the current target object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.MemberToken.HandleCurrentTargetPropertyValueChanged">
            <summary>
            Handles the current target property value changed.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.MemberToken.ChangeDetected(System.String)">
            <summary>
            Notifies the parent IPropertyMonitor that a property on the target object has changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.MemberToken.DisposeOverride">
            <summary>
            When overridden in a derived class, lets the derived class dispose any event handlers.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Dependencies.PathNavigation.Tokens.MemberToken.RemainingPath">
            <summary>
            Gets the remaining fragments.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Dependencies.PathNavigation.Tokens.MemberToken.PropertyName">
            <summary>
            Gets the remaining fragments.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Dependencies.PathNavigation.Tokens.MemberToken.CurrentTarget">
            <summary>
            Gets the current target.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Dependencies.PathNavigation.Tokens.MemberToken.PropertyMonitorLock">
            <summary>
            Gets the property monitor lock.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Dependencies.PathNavigation.Tokens.MemberToken.PathNavigator">
            <summary>
            Gets the traverser.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Dependencies.PathNavigation.Tokens.MemberToken.NextToken">
            <summary>
            Gets the next monitor.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.WpfMemberToken.#ctor(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.String,System.String,System.Action{System.Object,System.String},Bindable.Linq.Dependencies.PathNavigation.IPathNavigator)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Dependencies.PathNavigation.Tokens.WpfMemberToken"/> class.
            </summary>
            <param name="objectToObserve">The object to observe.</param>
            <param name="dependencyProperty">The dependency property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="remainingPath">The remaining path.</param>
            <param name="callback">The callback.</param>
            <param name="pathNavigator">The path navigator.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.WpfMemberToken.DiscardCurrentTargetOverride">
            <summary>
            When overridden in a derived class, gives the class an opportunity to discard the current target.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.WpfMemberToken.MonitorCurrentTargetOverride">
            <summary>
            When overridden in a derived class, gives the class an opportunity to monitor the current target.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.WpfMemberToken.ReadCurrentPropertyValueOverride">
            <summary>
            When overriden in a derived class, gets the value of the current target object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.WpfMemberToken.DisposeOverride">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.Extractors.StaticDependencyExtractor.ExtractFromRoot(System.Linq.Expressions.Expression,System.String)">
            <summary>
            When overridden in a derived class, extracts the appropriate dependency from the root of the expression.
            </summary>
            <param name="rootExpression">The root expression.</param>
            <param name="propertyPath">The property path.</param>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Dependencies.Definitions.ExternalDependencyDefinition">
            <summary>
            Defines a dependency on an external object that implements the INotifyPropertyChanged interface.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Definitions.ExternalDependencyDefinition.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Dependencies.Definitions.ExternalDependencyDefinition"/> class.
            </summary>
            <param name="propertyPath">The property path.</param>
            <param name="targetObject">The target object.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Definitions.ExternalDependencyDefinition.AppliesToCollections">
            <summary>
            Determines whether this instance can construct dependencies for a collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Definitions.ExternalDependencyDefinition.AppliesToSingleElement">
            <summary>
            Determines whether this instance can construct dependencies for a single element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Definitions.ExternalDependencyDefinition.ConstructForCollection``1(Bindable.Linq.Interfaces.IBindableCollection{``0},Bindable.Linq.Dependencies.PathNavigation.IPathNavigator)">
            <summary>
            Constructs the dependency for a collection of elements.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="sourceElements">The source elements.</param>
            <param name="pathNavigator">The path navigator.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Definitions.ExternalDependencyDefinition.ConstructForElement``1(``0,Bindable.Linq.Dependencies.PathNavigation.IPathNavigator)">
            <summary>
            Constructs a dependency for a single element.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="sourceElement">The source element.</param>
            <param name="pathNavigator">The path navigator.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Definitions.ExternalDependencyDefinition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Bindable.Linq.Dependencies.Definitions.ExternalDependencyDefinition.PropertyPath">
            <summary>
            Gets or sets the property path.
            </summary>
            <value>The property path.</value>
        </member>
        <member name="P:Bindable.Linq.Dependencies.Definitions.ExternalDependencyDefinition.TargetObject">
            <summary>
            Gets or sets the target object.
            </summary>
            <value>The target object.</value>
        </member>
        <member name="T:Bindable.Linq.Configuration.DefaultBindingConfiguration">
            <summary>
            The default binding configuration to use.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Configuration.IBindingConfiguration">
            <summary>
            An interface that can be implemented by objects that control what binding options
            are in play.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Configuration.IBindingConfiguration.CreateExpressionAnalyzer">
            <summary>
            Creates the expression analyzer.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Configuration.IBindingConfiguration.CreatePathNavigator">
            <summary>
            Creates the path navigator.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Configuration.DefaultBindingConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Configuration.DefaultBindingConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Configuration.DefaultBindingConfiguration.CreateExpressionAnalyzer">
            <summary>
            Creates the expression analyzer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Configuration.DefaultBindingConfiguration.CreatePathNavigator">
            <summary>
            Creates the path navigator.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Helpers.WeakEventProxy`1">
            <summary>
            An event handler wrapper used to create weak-reference event handlers, so that event subscribers 
            can be garbage collected without the event publisher interfering. 
            </summary>
            <typeparam name="TEventArgs">The type of event arguments used in the event handler.</typeparam>
            <remarks>
            To understand why this class is needed, see this page: 
                http://www.paulstovell.net/blog/index.php/wpf-binding-bug-leads-to-possible-memory-issues/
            For examples on how this is used, it is best to look at the unit test: 
                WeakEventProxyTests.cs
            </remarks>
        </member>
        <member name="M:Bindable.Linq.Helpers.WeakEventProxy`1.#ctor(System.EventHandler{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Helpers.WeakEventProxy`1"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Bindable.Linq.Helpers.WeakEventProxy`1.Handler(System.Object,`0)">
            <summary>
            Used as the event handler which should be subscribed to source collections.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Bindable.Linq.Aggregators.Aggregator`2">
            <summary>
            Serves as a base class for all aggregate functions. From Bindable LINQ's perspective, an Aggregator is a LINQ operation which 
            tranforms a collection of items into an item. This makes it different to an Iterator, which transforms a collection into another 
            collection, or an Operator which transforms one item into another.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="T:Bindable.Linq.Interfaces.IBindable`1">
            <summary>
            This interface is implemented by the results of any Bindable LINQ query which result in 
            single items, as opposed to collections. 
            </summary>
            <typeparam name="TValue">The type of the value contained within the instance.</typeparam>
        </member>
        <member name="T:Bindable.Linq.Interfaces.IBindable">
            <summary>
            This interface is implemented by the results of any Bindable LINQ query which result in 
            single items, as opposed to collections. 
            </summary>
        </member>
        <member name="M:Bindable.Linq.Interfaces.IBindable.Evaluate">
            <summary>
            Evaluates this instance.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Interfaces.IBindable.Dispatcher">
            <summary>
            Gets the dispatcher.
            </summary>
            <value>The dispatcher.</value>
        </member>
        <member name="P:Bindable.Linq.Interfaces.IBindable.HasEvaluated">
            <summary>
            Gets a value indicating whether this instance has evaluated.
            </summary>
            <value>
            	<c>true</c> if this instance has evaluated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Bindable.Linq.Interfaces.IBindable`1.Current">
            <summary>
            The resulting value. Rather than being returned directly, the value is housed 
            within the <see cref="T:Bindable.Linq.Interfaces.IBindable`1"/> container so that it can be updated when 
            the source it was created from changes. 
            </summary>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Aggregator`2.#ctor(Bindable.Linq.Interfaces.IBindableCollection{`0},Bindable.Linq.Threading.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Aggregators.Aggregator`2"/> class.
            </summary>
            <param name="sourceCollection">The source collection.</param>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Aggregator`2.AcceptDependency(Bindable.Linq.Dependencies.IDependencyDefinition)">
            <summary>
            Sets a new dependency on a Bindable LINQ operation.
            </summary>
            <param name="definition">A definition of the dependency.</param>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Aggregator`2.Evaluate">
            <summary>
            Evaluates this instance.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Aggregator`2.Refresh">
            <summary>
            Refreshes the value by forcing it to be recalculated or reconsidered.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Aggregator`2.RefreshOverride">
            <summary>
            When overridden in a derived class, provides the aggregator the opportunity to calculate the 
            value.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Aggregator`2.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Bindable.Linq.Aggregators.Aggregator`2.PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Aggregator`2.BeforeDisposeOverride">
            <summary>
            Called just before the object is disposed and all event subscriptions are released.
            </summary>
        </member>
        <member name="E:Bindable.Linq.Aggregators.Aggregator`2.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Aggregators.Aggregator`2.SourceCollection">
            <summary>
            Gets the source collections that this aggregate is aggregating.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Aggregators.Aggregator`2.Current">
            <summary>
            The resulting value. Rather than being returned directly, the value is housed
            within the <see cref="T:Bindable.Linq.Interfaces.IBindable`1"/> container so that it can be updated when
            the source it was created from changes.
            </summary>
            <value></value>
        </member>
        <member name="P:Bindable.Linq.Aggregators.Aggregator`2.HasEvaluated">
            <summary>
            Gets or sets a value indicating whether this instance has evaluated.
            </summary>
            <value>
            	<c>true</c> if this instance has evaluated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Bindable.Linq.Helpers.PropertyReaderFactory">
            <summary>
            Provides the ability to read the value of a property from a given object without using reflection.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Helpers.PropertyReaderFactory.Create``1(System.Type,System.String)">
            <summary>
            Creates a reader that reads a specific type of property from a given object type by creating a delegate to access it.
            </summary>
            <typeparam name="TCast">The type to cast the returning property to.</typeparam>
            <param name="objectType">The type of the object containing the property.</param>
            <param name="propertyName">The name of the property that will be read.</param>
            <returns>A strongly typed property reader that will read the property value without reflection.</returns>
        </member>
        <member name="T:Bindable.Linq.Helpers.PropertyReaderFactory.DelegatePropertyReader`3">
            <summary>
            Private implementation of IDelegatePropertyReader.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TReturn">The type of the return.</typeparam>
            <typeparam name="TCast">The type to cast the result to.</typeparam>
        </member>
        <member name="T:Bindable.Linq.Helpers.IPropertyReader`1">
            <summary>
            This interface is implemented by classes which read property values.
            </summary>
            <typeparam name="TCast">The type to cast the return type to.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Helpers.IPropertyReader`1.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Helpers.PropertyReaderFactory.DelegatePropertyReader`3.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Helpers.PropertyReaderFactory.DelegatePropertyReader`3"/> class.
            </summary>
            <param name="caller">The caller.</param>
        </member>
        <member name="M:Bindable.Linq.Helpers.PropertyReaderFactory.DelegatePropertyReader`3.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Helpers.PropertyReaderFactory.FieldReader`1">
            <summary>
            Private implementation of IDelegatePropertyReader.
            </summary>
            <typeparam name="TCast">The type to cast the result to.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Helpers.PropertyReaderFactory.FieldReader`1.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Helpers.PropertyReaderFactory.DelegatePropertyReader`3"/> class.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Bindable.Linq.Helpers.PropertyReaderFactory.FieldReader`1.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionFlattener">
            <summary>
            Given a LINQ expression, traverses the expression and produces a flat list of all of the 
            expressions. A list of expression types can be provided which the expression flattener will stop 
            at rather than traversing any further.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionFlattener.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.ExpressionType[])">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionFlattener"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="stopAt">Expression types to stop processing at.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionFlattener.TraverseExpressions(System.Collections.IEnumerable)">
            <summary>
            Traverses the expressions.
            </summary>
            <param name="expressions">The expressions.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionFlattener.TraverseExpression(System.Linq.Expressions.Expression)">
            <summary>
            Traverses the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionFlattener.TraverseBinaryExpression(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Traverses the binary expression.
            </summary>
            <param name="binaryExpression">The binary expression.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionFlattener.TraverseConditionalExpression(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Traverses the conditional expression.
            </summary>
            <param name="conditionalExpression">The conditional expression.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionFlattener.TraverseConstantExpression(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Traverses the constant expression.
            </summary>
            <param name="constantExpression">The constant expression.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionFlattener.TraverseInvocationExpression(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Traverses the invocation expression.
            </summary>
            <param name="invocationExpression">The invocation expression.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionFlattener.TraverseLambdaExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Traverses the lambda expression.
            </summary>
            <param name="lambdaExpression">The lambda expression.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionFlattener.TraverseListInitExpression(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Traverses the list init expression.
            </summary>
            <param name="listInitExpression">The list init expression.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionFlattener.TraverseMemberExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            Traverses the member expression.
            </summary>
            <param name="memberExpression">The member expression.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionFlattener.TraverseMemberInitExpression(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Traverses the member init expression.
            </summary>
            <param name="memberInitExpression">The member init expression.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionFlattener.TraverseMethodCallExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Traverses the method call expression.
            </summary>
            <param name="methodCallExpression">The method call expression.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionFlattener.TraverseNewArrayExpression(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Traverses the new array expression.
            </summary>
            <param name="newArrayExpression">The new array expression.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionFlattener.TraverseNewExpression(System.Linq.Expressions.NewExpression)">
            <summary>
            Traverses the new expression.
            </summary>
            <param name="newExpression">The new expression.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionFlattener.TraverseParameterExpression(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Traverses the parameter expression.
            </summary>
            <param name="parameterExpression">The parameter expression.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionFlattener.TraverseTypeBinaryExpression(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Traverses the type binary expression.
            </summary>
            <param name="typeBinaryExpression">The type binary expression.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionFlattener.TraverseUnaryExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Traverses the unary expression.
            </summary>
            <param name="unaryExpression">The unary expression.</param>
        </member>
        <member name="P:Bindable.Linq.Dependencies.ExpressionAnalysis.ExpressionFlattener.Expressions">
            <summary>
            Gets the member expressions that have been found.
            </summary>
            <value>The member expressions.</value>
        </member>
        <member name="T:Bindable.Linq.Dependencies.PathNavigation.Tokens.SilverlightMemberToken">
            <summary>
            A property monitor for WPF DependencyProperties.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.SilverlightMemberToken.#ctor(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.String,System.String,System.Action{System.Object,System.String},Bindable.Linq.Dependencies.PathNavigation.IPathNavigator)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Dependencies.PathNavigation.Tokens.SilverlightMemberToken"/> class.
            </summary>
            <param name="objectToObserve">The object to observe.</param>
            <param name="dependencyProperty">The dependency property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="remainingPath">The remaining path.</param>
            <param name="callback">The callback.</param>
            <param name="pathNavigator">The path navigator.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.SilverlightMemberToken.DiscardCurrentTargetOverride">
            <summary>
            When overridden in a derived class, gives the class an opportunity to discard the current target.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.SilverlightMemberToken.MonitorCurrentTargetOverride">
            <summary>
            When overridden in a derived class, gives the class an opportunity to monitor the current target.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.SilverlightMemberToken.ReadCurrentPropertyValueOverride">
            <summary>
            When overriden in a derived class, gets the value of the current target object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.SilverlightMemberToken.DisposeOverride">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Dependencies.PathNavigation.TokenFactories.WindowsFormsMemberTokenFactory">
            <summary>
            A property parser for properties on a Windows Forms control.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Dependencies.PathNavigation.TokenFactories.ITokenFactory">
            <summary>
            Implemented by factories that construct <see cref="T:Bindable.Linq.Dependencies.PathNavigation.Tokens.IToken">ITokens</see> from a property path.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.TokenFactories.ITokenFactory.ParseNext(System.Object,System.String,System.Action{System.Object,System.String},Bindable.Linq.Dependencies.PathNavigation.IPathNavigator)">
            <summary>
            Creates an appropriate property monitor for the remaining property path string on the target object.
            </summary>
            <param name="target">The target.</param>
            <param name="propertyPath">The property path.</param>
            <param name="callback">The callback.</param>
            <param name="pathNavigator">The path navigator.</param>
            <returns>
            An appropriate <see cref="T:Bindable.Linq.Dependencies.PathNavigation.Tokens.IToken"/> for the property.
            </returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.TokenFactories.WindowsFormsMemberTokenFactory.ParseNext(System.Object,System.String,System.Action{System.Object,System.String},Bindable.Linq.Dependencies.PathNavigation.IPathNavigator)">
            <summary>
            Creates an appropriate property monitor for the remaining property path string on the target object.
            </summary>
            <param name="target">The target.</param>
            <param name="propertyPath">The property path.</param>
            <param name="callback">The callback.</param>
            <param name="pathNavigator">The path navigator.</param>
            <returns>
            An appropriate <see cref="T:Bindable.Linq.Dependencies.PathNavigation.Tokens.IToken"/> for the property.
            </returns>
        </member>
        <member name="T:Bindable.Linq.Configuration.ExplicitBindingConfiguration">
            <summary>
            A binding configuration used when the runtime should not automatically detect dependencies.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Configuration.ExplicitBindingConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Configuration.ExplicitBindingConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Configuration.ExplicitBindingConfiguration.CreateExpressionAnalyzer">
            <summary>
            Creates the expression analyzer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Configuration.ExplicitBindingConfiguration.CreatePathNavigator">
            <summary>
            Creates the path navigator.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Aggregators.ElementAtAggregator`1">
            <summary>
            An aggregator that finds the element at a given index within a collection.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Aggregators.ElementAtAggregator`1.#ctor(Bindable.Linq.Interfaces.IBindableCollection{`0},System.Int32,Bindable.Linq.Threading.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Aggregators.ElementAtAggregator`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="index">The index.</param>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Bindable.Linq.Aggregators.ElementAtAggregator`1.RefreshOverride">
            <summary>
            When overridden in a derived class, provides the aggregator the opportunity to calculate the
            value.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Adapters.Incoming.BindableCollectionAdapterBase`1">
            <summary>
            Serves as a base class for adapters that convert collections to bindable collections.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Adapters.Incoming.BindableCollectionAdapterBase`1.Evaluate">
            <summary>
            Evaluates this instance.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Adapters.Incoming.BindableCollectionAdapterBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Bindable.Linq.Adapters.Incoming.BindableCollectionAdapterBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Bindable.Linq.Adapters.Incoming.BindableCollectionAdapterBase`1.Refresh">
            <summary>
            Refreshes the object.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Adapters.Incoming.BindableCollectionAdapterBase`1.AcceptDependency(Bindable.Linq.Dependencies.IDependencyDefinition)">
            <summary>
            Sets a new dependency on a Bindable LINQ operation.
            </summary>
            <param name="definition">A definition of the dependency.</param>
        </member>
        <member name="M:Bindable.Linq.Adapters.Incoming.BindableCollectionAdapterBase`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Bindable.Linq.Adapters.Incoming.BindableCollectionAdapterBase`1.PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Bindable.Linq.Adapters.Incoming.BindableCollectionAdapterBase`1.OnEvaluating(Bindable.Linq.Interfaces.Events.EvaluatingEventArgs{`0})">
            <summary>
            Raises the <see cref="E:Bindable.Linq.Adapters.Incoming.BindableCollectionAdapterBase`1.Evaluating"/> event.
            </summary>
            <param name="e">The <see cref="T:Bindable.Linq.Interfaces.Events.EvaluatingEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Bindable.Linq.Adapters.Incoming.BindableCollectionAdapterBase`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Bindable.Linq.Adapters.Incoming.BindableCollectionAdapterBase`1.CollectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Bindable.Linq.Adapters.Incoming.BindableCollectionAdapterBase`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:Bindable.Linq.Adapters.Incoming.BindableCollectionAdapterBase`1.Evaluating">
            <summary>
            Occurs when the collection is being evaluated (GetEnumerator() is called) for the first time, just before it returns
            the results, to provide insight into the items being evaluated. This allows consumers to iterate the items in a collection
            just before they are returned to the caller, while still enabling delayed execution of queries.
            </summary>
        </member>
        <member name="E:Bindable.Linq.Adapters.Incoming.BindableCollectionAdapterBase`1.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Adapters.Incoming.BindableCollectionAdapterBase`1.HasEvaluated">
            <summary>
            Gets a value indicating whether this instance has already evaluated.
            </summary>
            <value>
            	<c>true</c> if this instance has evaluated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Bindable.Linq.Adapters.Incoming.BindableCollectionAdapterBase`1.CollectionChangedSuspendedState">
            <summary>
            Gets the state of the collection changed suspended.
            </summary>
            <value>The state of the collection changed suspended.</value>
        </member>
        <member name="P:Bindable.Linq.Adapters.Incoming.BindableCollectionAdapterBase`1.Item(System.Int32)">
            <summary>
            Gets the <typeparamref name="TElement"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Bindable.Linq.Adapters.Incoming.BindableCollectionAdapterBase`1.Count">
            <summary>
            Gets the count of items in the collection.
            </summary>
            <value></value>
        </member>
        <member name="T:Bindable.Linq.Iterators.WhereIterator`1">
            <summary>
            The Iterator created when a Where operation is performed.
            </summary>
            <typeparam name="TElement">The type of source item being filtered.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Iterators.WhereIterator`1.#ctor(Bindable.Linq.Interfaces.IBindableCollection{`0},System.Func{`0,System.Boolean},Bindable.Linq.Threading.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Iterators.WhereIterator`1"/> class.
            </summary>
            <param name="sourceCollection">The source collection.</param>
            <param name="predicate">The predicate.</param>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.WhereIterator`1.EvaluateSourceCollection">
            <summary>
            When implemented in a derived class, processes all items in a given source collection.
            </summary>
            <remarks>Warning: No locks should be held when invoking this method.</remarks>
        </member>
        <member name="M:Bindable.Linq.Iterators.WhereIterator`1.Filter(`0)">
            <summary>
            Filters an item from the source collection.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
            <value>The predicate.</value>
        </member>
        <member name="M:Bindable.Linq.Iterators.WhereIterator`1.ReactToAdd(System.Int32,`0)">
            <summary>
            When overridden in a derived class, processes an Add event over a range of items.
            </summary>
            <param name="insertionIndex">Index of the insertion.</param>
            <param name="addedItem">The added item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.WhereIterator`1.ReactToMove(System.Int32,System.Int32,`0)">
            <summary>
            Reacts to move.
            </summary>
            <param name="oldIndex">The old index.</param>
            <param name="newIndex">The new index.</param>
            <param name="movedItem">The moved item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.WhereIterator`1.ReactToRemove(System.Int32,`0)">
            <summary>
            When overridden in a derived class, processes a Remove event over a range of items.
            </summary>
            <param name="index">The index.</param>
            <param name="removedItem">The removed item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.WhereIterator`1.ReactToReplace(System.Int32,`0,`0)">
            <summary>
            When overridden in a derived class, processes a Replace event over a range of items.
            </summary>
            <param name="oldIndex">The old index.</param>
            <param name="oldItem">The old item.</param>
            <param name="newItem">The new item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.WhereIterator`1.ReactToItemPropertyChanged(`0,System.String)">
            <summary>
            When overridden in a derived class, processes a PropertyChanged event on a source item.
            </summary>
            <param name="item">The item.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Bindable.Linq.Iterators.GroupByIterator`3">
            <summary>
            An Iterator that reads items from the source collection and groups them by a common key. 
            </summary>
        </member>
        <member name="M:Bindable.Linq.Iterators.GroupByIterator`3.#ctor(Bindable.Linq.Interfaces.IBindableCollection{`1},System.Linq.Expressions.Expression{System.Func{`1,`0}},System.Linq.Expressions.Expression{System.Func{`1,`2}},System.Collections.Generic.IEqualityComparer{`0},Bindable.Linq.Threading.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Iterators.GroupByIterator`3"/> class.
            </summary>
            <param name="sourceCollection">The source collection.</param>
            <param name="keySelector">The key selector.</param>
            <param name="elementSelector">The element selector.</param>
            <param name="keyComparer">The key comparer.</param>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.GroupByIterator`3.EvaluateSourceCollection">
            <summary>
            When implemented in a derived class, processes all items in a given source collection.
            </summary>
            <remarks>Warning: No locks should be held when invoking this method.</remarks>
        </member>
        <member name="M:Bindable.Linq.Iterators.GroupByIterator`3.KeySelector(`1)">
            <summary>
            Extracts a key from a given source item.
            </summary>
            <param name="sourceItem">The source item.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Iterators.GroupByIterator`3.CompareKeys(`0,`0)">
            <summary>
            Compares two keys.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.GroupByIterator`3.ReactToAdd(System.Int32,`1)">
            <summary>
            When overridden in a derived class, processes an Add event over a range of items.
            </summary>
            <param name="sourceStartingIndex">Index of the source starting.</param>
            <param name="addedItem">The added item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.GroupByIterator`3.ReactToMove(System.Int32,System.Int32,`1)">
            <summary>
            When overridden in a derived class, processes a Move event over a range of items.
            </summary>
            <param name="oldIndex">The old index.</param>
            <param name="newIndex">The new index.</param>
            <param name="movedItem">The moved item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.GroupByIterator`3.ReactToRemove(System.Int32,`1)">
            <summary>
            When overridden in a derived class, processes a Remove event over a range of items.
            </summary>
            <param name="oldIndex">The old index.</param>
            <param name="removedItem">The removed item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.GroupByIterator`3.ReactToReplace(System.Int32,`1,`1)">
            <summary>
            When overridden in a derived class, processes a Replace event over a range of items.
            </summary>
            <param name="oldIndex">The old index.</param>
            <param name="oldItem">The old item.</param>
            <param name="newItem">The new item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.GroupByIterator`3.ReactToItemPropertyChanged(`1,System.String)">
            <summary>
            When overridden in a derived class, processes a PropertyChanged event on a source item.
            </summary>
            <param name="item">The item.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Bindable.Linq.Helpers.LifetimeCouplings">
            <summary>
            Provides a way for object instances to be "coupled" to the hosting class's object lifetime. Essentially, it's just an object store that is used to store things that the 
            garbage collector would otherwise clean up. 
            </summary>
        </member>
        <member name="M:Bindable.Linq.Helpers.LifetimeCouplings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Helpers.LifetimeCouplings"/> class.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Helpers.LifetimeCouplings.Add(System.Object)">
            <summary>
            Adds an object that will be kept alive by the host class.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Bindable.Linq.Helpers.LifetimeCouplings.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Dependencies.IDependency">
            <summary>
            An interface implemented by all dependencies. 
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.IDependency.SetReevaluateElementCallback(System.Action{System.Object,System.String})">
            <summary>
            Sets the callback action the dependency should invoke when the dependent object has a property that changes.
            </summary>
            <param name="action">The callback action to invoke.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.IDependency.SetReevaluateCallback(System.Action{System.Object})">
            <summary>
            Sets the callback action the dependency should invoke when the dependent object changes, signalling the 
            whole collection should re-evaluate.
            </summary>
            <param name="action">The callback action to invoke.</param>
        </member>
        <member name="T:Bindable.Linq.Dependencies.PathNavigation.TokenFactories.ClrMemberTokenFactory">
            <summary>
            A parser for CLR properties.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.TokenFactories.ClrMemberTokenFactory.ParseNext(System.Object,System.String,System.Action{System.Object,System.String},Bindable.Linq.Dependencies.PathNavigation.IPathNavigator)">
            <summary>
            Creates an appropriate property monitor for the remaining property path string on the target object.
            </summary>
            <param name="target">The target.</param>
            <param name="propertyPath">The property path.</param>
            <param name="callback">The callback.</param>
            <param name="pathNavigator">The path navigator.</param>
            <returns>
            An appropriate <see cref="T:Bindable.Linq.Dependencies.PathNavigation.Tokens.IToken"/> for the property.
            </returns>
        </member>
        <member name="T:Bindable.Linq.DependencyDiscovery">
            <summary>
            Indicates which mode of automatic dependency analysis to conduct on an expression. 
            </summary>
        </member>
        <member name="F:Bindable.Linq.DependencyDiscovery.Enabled">
            <summary>
            Bindable LINQ will inspect the expression(s) passed to this extension method and look for property access or control access in order to detect  
            and wire up dependencies automatically. This is the default behavior.
            </summary>
        </member>
        <member name="F:Bindable.Linq.DependencyDiscovery.Disabled">
            <summary>
            No automatic dependency analysis will take place. Dependencies can still be added manually using the DependantOn extension methods. 
            </summary>
        </member>
        <member name="T:Bindable.Linq.Aggregators.Numerics.Int32NullNumeric">
            <summary>
            Provides a numeric operations wrapper for nullable int types.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.Int32NullNumeric.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Given a list of sourceCollection, adds them and returns the sum.
            </summary>
            <param name="sourceCollection">The sourceCollection to sum.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.Int32NullNumeric.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Given a list of sourceCollection, computes the average value.
            </summary>
            <param name="sourceCollection">The sourceCollection to average.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.Int32NullNumeric.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Given a list of sourceCollection, returns the lowest value.
            </summary>
            <param name="sourceCollection">The sourceCollection to locate the minimum value in.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.Int32NullNumeric.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Given a list of sourceCollection, returns the highest value.
            </summary>
            <param name="sourceCollection">The sourceCollection to locate the maximum value in.</param>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Threading.IDispatcher">
            <summary>
            Provides a wrapper around the process of dispatching actions onto 
            different threads, primarily for unit testing.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Threading.IDispatcher.Dispatch(System.Action)">
            <summary>
            Dispatches the specified action to the thread.
            </summary>
            <param name="actionToInvoke">The action to invoke.</param>
        </member>
        <member name="M:Bindable.Linq.Threading.IDispatcher.Dispatch``1(System.Func{``0})">
            <summary>
            Dispatches the specified action to the thread.
            </summary>
            <param name="actionToInvoke">The action to invoke.</param>
        </member>
        <member name="M:Bindable.Linq.Threading.IDispatcher.DispatchRequired">
            <summary>
            Checks whether the thread invoking the method .
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Operators.SwitchOperator`2">
            <summary>
            The Operator created when a Switch is set up.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="T:Bindable.Linq.Operators.Operator`2">
            <summary>
            Serves as a base class for all operator functions. From Bindable LINQ's perspective, an Operator is a LINQ 
            operation which tranforms a single source items into single result item. This makes it different to an Iterator 
            which transforms a collection into another collection, or an Aggregator which transforms a collection into a 
            single element.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Operators.Operator`2.#ctor(Bindable.Linq.Interfaces.IBindable{`0},Bindable.Linq.Threading.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Operators.Operator`2"/> class.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Bindable.Linq.Operators.Operator`2.RefreshOverride">
            <summary>
            When overridden in a derived class, refreshes the operator.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Operators.Operator`2.Refresh">
            <summary>
            Refreshes the object.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Operators.Operator`2.AcceptDependency(Bindable.Linq.Dependencies.IDependencyDefinition)">
            <summary>
            Sets a new dependency on a Bindable LINQ operation.
            </summary>
            <param name="definition">A definition of the dependency.</param>
        </member>
        <member name="M:Bindable.Linq.Operators.Operator`2.Evaluate">
            <summary>
            Evaluates the operator.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Operators.Operator`2.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Bindable.Linq.Operators.Operator`2.PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Bindable.Linq.Operators.Operator`2.BeforeDisposeOverride">
            <summary>
            Called just before the object is disposed and all event subscriptions are released.
            </summary>
        </member>
        <member name="E:Bindable.Linq.Operators.Operator`2.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Operators.Operator`2.Source">
            <summary>
            Gets the source.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Operators.Operator`2.Current">
            <summary>
            The resulting value. Rather than being returned directly, the value is housed
            within the <see cref="T:Bindable.Linq.Interfaces.IBindable`1"/> container so that it can be updated when
            the source it was created from changes.
            </summary>
            <value></value>
        </member>
        <member name="P:Bindable.Linq.Operators.Operator`2.HasEvaluated">
            <summary>
            Gets or sets a value indicating whether this instance has evaluated.
            </summary>
            <value>
            	<c>true</c> if this instance has evaluated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Bindable.Linq.Operators.ISwitch`2">
            <summary>
            Represents the result of a call to the Switch operator, providing an object that can be used to build up a switch statement.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Operators.ISwitch`2.AddCase(Bindable.Linq.Operators.ISwitchCase{`0,`1})">
            <summary>
            Adds a case statement to the switch.
            </summary>
            <param name="customCase">The custom case.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Operators.ISwitch`2.AddDefault(Bindable.Linq.Operators.ISwitchCase{`0,`1})">
            <summary>
            Adds the default case.
            </summary>
            <param name="defaultCase">The default case.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Operators.SwitchOperator`2.#ctor(Bindable.Linq.Interfaces.IBindable{`0},Bindable.Linq.Threading.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Operators.SwitchOperator`2"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Bindable.Linq.Operators.SwitchOperator`2.AddCase(Bindable.Linq.Operators.ISwitchCase{`0,`1})">
            <summary>
            Adds a case statement to the switch.
            </summary>
            <param name="customCase">The custom case.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Operators.SwitchOperator`2.AddDefault(Bindable.Linq.Operators.ISwitchCase{`0,`1})">
            <summary>
            Adds the default case.
            </summary>
            <param name="defaultCase">The default case.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Operators.SwitchOperator`2.RefreshOverride">
            <summary>
            When overridden in a derived class, refreshes the operator.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Iterators.OrderByIterator`2">
            <summary>
            The Iterator created when ordering a collection.
            </summary>
            <typeparam name="TElement">The source collection type.</typeparam>
            <typeparam name="TKey">The type of key used to determine which properties to sort by.</typeparam>
        </member>
        <member name="T:Bindable.Linq.Interfaces.IOrderedBindableCollection`1">
            <summary>
            This interface is supported by all Bindable LINQ result sets. As well as being an <see cref="T:System.Collections.Generic.IEnumerable`1"/>, 
            it provides a number of other properties and methods which take advantage of Bindable LINQ's data 
            binding and delayed execution features. It also allows further sorting of the items through the 
            <see cref="M:Bindable.Linq.Interfaces.IOrderedBindableCollection`1.CreateOrderedIterator``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)"/> method.
            </summary>
            <typeparam name="TResult">The type of item being enumerated.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Interfaces.IOrderedBindableCollection`1.CreateOrderedIterator``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
            <summary>
            Performs a subsequent ordering on the elements of an 
            <see cref="T:Bindable.Linq.Interfaces.IOrderedBindableCollection`1"/> according to a key.
            </summary>
            <param name="keySelector">The <see cref="T:System.Func`2"/> used to extract the key for each element.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> used to compare keys for placement in the returned sequence.</param>
            <param name="descending">true to sort the elements in descending order; false to sort the elements in ascending order.</param>
            <typeparam name="TKey">The type of the key produced by <paramref name="keySelector"/>.</typeparam>
            <returns>
            An <see cref="T:Bindable.Linq.Interfaces.IOrderedBindableCollection`1"/> whose elements are sorted according to a key.
            </returns>
        </member>
        <member name="M:Bindable.Linq.Iterators.OrderByIterator`2.#ctor(Bindable.Linq.Interfaces.IBindableCollection{`0},Bindable.Linq.Iterators.ItemSorter{`0,`1},Bindable.Linq.Threading.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Iterators.OrderByIterator`2"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="itemSorter">The item sorter.</param>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.OrderByIterator`2.EvaluateSourceCollection">
            <summary>
            When implemented in a derived class, processes all items in a given source collection.
            </summary>
            <remarks>Warning: No locks should be held when invoking this method.</remarks>
        </member>
        <member name="M:Bindable.Linq.Iterators.OrderByIterator`2.Compare(`0,`0)">
            <summary>
            Compares the specified items.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Iterators.OrderByIterator`2.ReactToAdd(System.Int32,`0)">
            <summary>
            When overridden in a derived class, processes an Add event over a range of items.
            </summary>
            <param name="insertionIndex">Index of the insertion.</param>
            <param name="addedItem">The added item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.OrderByIterator`2.ReactToMove(System.Int32,System.Int32,`0)">
            <summary>
            When overridden in a derived class, processes a Move event over a range of items.
            </summary>
            <param name="oldIndex">The old index.</param>
            <param name="newIndex">The new index.</param>
            <param name="movedItem">The moved item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.OrderByIterator`2.ReactToRemove(System.Int32,`0)">
            <summary>
            When overridden in a derived class, processes a Remove event over a range of items.
            </summary>
            <param name="oldIndex">The old index.</param>
            <param name="removedItem">The removed item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.OrderByIterator`2.ReactToReplace(System.Int32,`0,`0)">
            <summary>
            When overridden in a derived class, processes a Replace event over a range of items.
            </summary>
            <param name="oldIndex">The old index.</param>
            <param name="oldItem">The old item.</param>
            <param name="newItem">The new item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.OrderByIterator`2.ReactToItemPropertyChanged(`0,System.String)">
            <summary>
            When overridden in a derived class, processes a PropertyChanged event on a source item.
            </summary>
            <param name="item">The item.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.OrderByIterator`2.CreateOrderedIterator``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
            <summary>
            Performs a subsequent ordering on the elements of an <see cref="T:Bindable.Linq.Interfaces.IOrderedBindableCollection`1"/>
            according to a key.
            </summary>
            <typeparam name="TNewKey">The type of the key.</typeparam>
            <param name="keySelector">The key selector.</param>
            <param name="comparer">The comparer.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Interfaces.Internal.IEditableBindableGrouping`2.AddRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds a range of elements to the collection.
            </summary>
            <param name="elements">The elements.</param>
        </member>
        <member name="M:Bindable.Linq.Interfaces.Internal.IEditableBindableGrouping`2.RemoveRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Removes a range of elements from the collection.
            </summary>
            <param name="elements">The elements.</param>
        </member>
        <member name="M:Bindable.Linq.Interfaces.Internal.IEditableBindableGrouping`2.ReplaceRange(System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Replaces a range of elements in the collection with another range.
            </summary>
            <param name="oldItems">The old items.</param>
            <param name="newItems">The new items.</param>
        </member>
        <member name="T:Bindable.Linq.Configuration.BindingConfigurations">
            <summary>
            Contains the inbuilt Bindable LINQ binding configurations.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Configuration.BindingConfigurations.Default">
            <summary>
            Gets the default.
            </summary>
            <value>The default.</value>
        </member>
        <member name="P:Bindable.Linq.Configuration.BindingConfigurations.ExplicitDependenciesOnly">
            <summary>
            Gets the explicit dependencies only.
            </summary>
            <value>The explicit dependencies only.</value>
        </member>
        <member name="T:Bindable.Linq.Helpers.DefaultComparer`1">
            <summary>
            A class that provides a default <see cref="T:System.Collections.Generic.IComparer`1"/> and <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation for any type.
            </summary>
            <typeparam name="TCompared">The type of the compared.</typeparam>
            <remarks>
            When ordering, we are normally given an IComparer, but sometimes we are given IComparable
            types instead. Rather than having "if" statements all through our <see cref="T:OrderByIterator"/>,
            we wrap the IComparable into an IComparer using this class.
            </remarks>
        </member>
        <member name="M:Bindable.Linq.Helpers.DefaultComparer`1.Compare(`0,`0)">
            <summary>
            Compares the specified items.
            </summary>
            <param name="left">The first item.</param>
            <param name="right">The second items.</param>
        </member>
        <member name="M:Bindable.Linq.Helpers.DefaultComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <paramref name="T"/> to compare.</param>
            <param name="y">The second object of type <paramref name="T"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Bindable.Linq.Helpers.DefaultComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:Bindable.Linq.Dependencies.ExpressionAnalysis.Extractors.ItemDependencyExtractor">
            <summary>
            Extracts dependencies placed on child items within a query by looking for uses of <see cref="T:System.Linq.Expressions.ParameterExpression"/>.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.Extractors.ItemDependencyExtractor.ExtractFromRoot(System.Linq.Expressions.Expression,System.String)">
            <summary>
            When overridden in a derived class, extracts the appropriate dependency from the root of the expression.
            </summary>
            <param name="rootExpression">The root expression.</param>
            <param name="propertyPath">The property path.</param>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Dependencies.PathNavigation.IPathNavigator">
            <summary>
            An interface implemented by classes which can traverse a property path.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.IPathNavigator.TraverseNext(System.Object,System.String,System.Action{System.Object,System.String})">
            <summary>
            Creates an appropriate property monitor for the remaining property path string on the target object.
            </summary>
            <param name="target">The target.</param>
            <param name="propertyPath">The property path.</param>
            <param name="callback">The callback.</param>
            <returns>
            An appropriate <see cref="T:Bindable.Linq.Dependencies.PathNavigation.Tokens.IToken"/> for the property.
            </returns>
        </member>
        <member name="T:Bindable.Linq.Adapters.Incoming.BindingListToBindableCollectionAdapter`1">
            <summary>
            An adapter to convert Windows Forms <see cref="T:System.ComponentModel.IBindingList"/> collections into <see cref="T:Bindable.Linq.Interfaces.IBindableCollection"/>.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Adapters.Incoming.BindingListToBindableCollectionAdapter`1.#ctor(System.Collections.IEnumerable,Bindable.Linq.Threading.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Adapters.Incoming.BindingListToBindableCollectionAdapter`1"/> class.
            </summary>
            <param name="sourceCollection">The source collection.</param>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="T:Bindable.Linq.Threading.DispatcherFactory">
            <summary>
            A factory for creating the correct <see cref="T:Bindable.Linq.Threading.IDispatcher"/> implementation based on
            the current environment.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Threading.DispatcherFactory.Create(System.Windows.Threading.Dispatcher)">
            <summary>
            Creates the specified dispatcher.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <returns>The correct IDispatcher.</returns>
        </member>
        <member name="T:Bindable.Linq.Dependencies.ExpressionAnalysis.Extractors.ExternalDependencyExtractor">
            <summary>
            A dependency extractor that finds dependencies on external resources. 
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.ExpressionAnalysis.Extractors.ExternalDependencyExtractor.ExtractFromRoot(System.Linq.Expressions.Expression,System.String)">
            <summary>
            When overridden in a derived class, extracts the appropriate dependency from the root of the expression.
            </summary>
            <param name="rootExpression">The root expression.</param>
            <param name="propertyPath">The property path.</param>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Threading.WpfDispatcher">
            <summary>
            This dispatcher is used at runtime by both Windows Forms and WPF. The WPF Dispatcher 
            class works within Windows Forms, so this appears to be safe.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Threading.WpfDispatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Threading.WpfDispatcher"/> class.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Threading.WpfDispatcher.#ctor(System.Windows.Threading.Dispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Threading.WpfDispatcher"/> class.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Bindable.Linq.Threading.WpfDispatcher.Dispatch(System.Action)">
            <summary>
            Dispatches the specified action to the thread.
            </summary>
            <param name="actionToInvoke">The action to invoke.</param>
        </member>
        <member name="M:Bindable.Linq.Threading.WpfDispatcher.Dispatch``1(System.Func{``0})">
            <summary>
            Dispatches the specified action to the thread.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="actionToInvoke">The action to invoke.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Threading.WpfDispatcher.DispatchRequired">
            <summary>
            Checks whether the thread invoking the method.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Operators.ISwitchDeclaration`1">
            <summary>
            Represents the result of a call to the Switch operator, providing an object that can be used to build up a switch statement.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Operators.ISwitchDeclaration`1.CreateForResultType``1">
            <summary>
            Instantiates the switch statement for a given result type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <returns>An instance of the switch statement for the given result type.</returns>
        </member>
        <member name="T:Bindable.Linq.Iterators.UnionIterator`1">
            <summary>
            The Iterator created when performing a union between one or more collections.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Iterators.UnionIterator`1.#ctor(Bindable.Linq.Interfaces.IBindableCollection{Bindable.Linq.Interfaces.IBindableCollection{`0}},Bindable.Linq.Threading.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Iterators.UnionIterator`1"/> class.
            </summary>
            <param name="elements">The elements.</param>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.UnionIterator`1.EvaluateSourceCollection">
            <summary>
            When implemented in a derived class, processes all items in a given source collection.
            </summary>
            <remarks>Warning: No locks should be held when invoking this method.</remarks>
        </member>
        <member name="M:Bindable.Linq.Iterators.UnionIterator`1.ReactToItemPropertyChanged(Bindable.Linq.Interfaces.IBindableCollection{`0},System.String)">
            <summary>
            When overridden in a derived class, processes a PropertyChanged event on a source item.
            </summary>
            <param name="item">The item.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.UnionIterator`1.ReactToAdd(System.Int32,Bindable.Linq.Interfaces.IBindableCollection{`0})">
            <summary>
            When overridden in a derived class, processes an Add event over a range of items.
            </summary>
            <param name="insertionIndex">Index of the insertion.</param>
            <param name="addedItem">The added item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.UnionIterator`1.ReactToReplace(System.Int32,Bindable.Linq.Interfaces.IBindableCollection{`0},Bindable.Linq.Interfaces.IBindableCollection{`0})">
            <summary>
            When overridden in a derived class, processes a Replace event over a range of items.
            </summary>
            <param name="index">The index.</param>
            <param name="oldItem">The old item.</param>
            <param name="newItem">The new item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.UnionIterator`1.ReactToMove(System.Int32,System.Int32,Bindable.Linq.Interfaces.IBindableCollection{`0})">
            <summary>
            When overridden in a derived class, processes a Move event over a range of items.
            </summary>
            <param name="originalIndex">Index of the original.</param>
            <param name="newIndex">The new index.</param>
            <param name="movedItem">The moved item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.UnionIterator`1.ReactToRemove(System.Int32,Bindable.Linq.Interfaces.IBindableCollection{`0})">
            <summary>
            When overridden in a derived class, processes a Remove event over a range of items.
            </summary>
            <param name="index">The index.</param>
            <param name="removedItem">The removed item.</param>
        </member>
        <member name="M:Bindable.Linq.Iterators.UnionIterator`1.BeforeResetOverride">
            <summary>
            When overridden in a derived class, provides the derived class with the ability to perform custom actions when
            the collection is reset, before the sources are re-loaded.
            </summary>
            <remarks>Warning: No locks should be held when invoking this method.</remarks>
        </member>
        <member name="T:Bindable.Linq.Interfaces.Events.EvaluatingEventHandler`1">
            <summary>
            Handler for the <see cref="T:Bindable.Linq.Interfaces.Events.EvaluatingEventArgs`1"/>.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Interfaces.Events.EvaluatingEventArgs`1">
            <summary>
            Event arguments raised when a collection is evaluated for the first time.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Interfaces.Events.EvaluatingEventArgs`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Interfaces.Events.EvaluatingEventArgs`1"/> class.
            </summary>
            <param name="itemsYielded">The items yielded.</param>
        </member>
        <member name="P:Bindable.Linq.Interfaces.Events.EvaluatingEventArgs`1.ItemsYieldedFromEvaluation">
            <summary>
            Gets the items yielded from first evaluation.
            </summary>
            <value>The items yielded from first evaluation.</value>
        </member>
        <member name="T:Bindable.Linq.Dependencies.Instances.ExternalDependency">
            <summary>
            Represents an item property dependency applied over a collection of items.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Instances.ExternalDependency.#ctor(System.Object,System.String,Bindable.Linq.Dependencies.PathNavigation.IPathNavigator)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Dependencies.Instances.ExternalDependency"/> class.
            </summary>
            <param name="targetObject">The target object.</param>
            <param name="propertyPath">The property path.</param>
            <param name="pathNavigator">The path navigator.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Instances.ExternalDependency.SetReevaluateElementCallback(System.Action{System.Object,System.String})">
            <summary>
            Sets the callback action the dependency should invoke when the dependent object has a property that changes.
            </summary>
            <param name="action">The callback action to invoke.</param>
            <remarks>External objects require the entire query to be re-evaluated, so this method is ignored.</remarks>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Instances.ExternalDependency.SetReevaluateCallback(System.Action{System.Object})">
            <summary>
            Sets the callback action the dependency should invoke when the dependent object changes, signalling the
            whole collection should re-evaluate.
            </summary>
            <param name="action">The callback action to invoke.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Instances.ExternalDependency.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Instances.ExternalDependency.Element_PropertyChanged(System.Object,System.String)">
            <summary>
            Called when a property on an element changes.
            </summary>
            <param name="element">The element.</param>
            <param name="propertyPath">The property path.</param>
        </member>
        <member name="T:Bindable.Linq.Aggregators.Numerics.DoubleNullNumeric">
            <summary>
            Provides a numeric operations wrapper for nullable double types.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.DoubleNullNumeric.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Given a list of sourceCollection, adds them and returns the sum.
            </summary>
            <param name="sourceCollection">The sourceCollection to sum.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.DoubleNullNumeric.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Given a list of sourceCollection, computes the average value.
            </summary>
            <param name="sourceCollection">The sourceCollection to average.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.DoubleNullNumeric.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Given a list of sourceCollection, returns the lowest value.
            </summary>
            <param name="sourceCollection">The sourceCollection to locate the minimum value in.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.DoubleNullNumeric.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Given a list of sourceCollection, returns the highest value.
            </summary>
            <param name="sourceCollection">The sourceCollection to locate the maximum value in.</param>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Aggregators.CustomAggregator`2">
            <summary>
            Aggregates a source collection using a custom accumulator callback provided by the caller.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulate.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Aggregators.CustomAggregator`2.#ctor(Bindable.Linq.Interfaces.IBindableCollection{`0},System.Func{Bindable.Linq.Interfaces.IBindableCollection{`0},`1},Bindable.Linq.Threading.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Aggregators.CustomAggregator`2"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="aggregator">The aggregator.</param>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Bindable.Linq.Aggregators.CustomAggregator`2.RefreshOverride">
            <summary>
            When overridden in a derived class, provides the aggregator the opportunity to calculate the
            value.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Operators.SwitchDefault`2">
            <summary>
            Represents a default case in a switch statement.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Operators.SwitchDefault`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Operators.SwitchDefault`2"/> class.
            </summary>
            <param name="resultExpression">The result expression.</param>
        </member>
        <member name="M:Bindable.Linq.Operators.SwitchDefault`2.Evaluate(`0)">
            <summary>
            Evaluates the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Operators.SwitchDefault`2.Return(`0)">
            <summary>
            Returns the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Collections.BindableGrouping`2">
            <summary>
            Used in the <see cref="T:Bindable.Linq.Iterators.GroupByIterator`3"/> as the result of a grouping.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableGrouping`2.#ctor(`0,Bindable.Linq.Interfaces.IBindableCollection{`1},Bindable.Linq.Threading.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Collections.BindableGrouping`2"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="groupWhereQuery">The group query.</param>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableGrouping`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableGrouping`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableGrouping`2.Refresh">
            <summary>
            Refreshes the object.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableGrouping`2.AcceptDependency(Bindable.Linq.Dependencies.IDependencyDefinition)">
            <summary>
            Sets a new dependency on a Bindable LINQ operation.
            </summary>
            <param name="definition">A definition of the dependency.</param>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableGrouping`2.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Bindable.Linq.Collections.BindableGrouping`2.PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableGrouping`2.OnEvaluating(Bindable.Linq.Interfaces.Events.EvaluatingEventArgs{`1})">
            <summary>
            Raises the <see cref="E:Bindable.Linq.Collections.BindableGrouping`2.Evaluating"/> event.
            </summary>
            <param name="e">The <see cref="T:Bindable.Linq.Interfaces.Events.EvaluatingEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Bindable.Linq.Collections.BindableGrouping`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Bindable.Linq.Collections.BindableGrouping`2.CollectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Bindable.Linq.Collections.BindableGrouping`2.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:Bindable.Linq.Collections.BindableGrouping`2.Evaluating">
            <summary>
            Occurs when the collection is being evaluated (GetEnumerator() is called) for the first time, just before it returns
            the results, to provide insight into the items being evaluated. This allows consumers to iterate the items in a collection
            just before they are returned to the caller, while still enabling delayed execution of queries.
            </summary>
        </member>
        <member name="E:Bindable.Linq.Collections.BindableGrouping`2.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="P:Bindable.Linq.Collections.BindableGrouping`2.HasEvaluated">
            <summary>
            Gets a value indicating whether this instance has already evaluated.
            </summary>
            <value>
            	<c>true</c> if this instance has evaluated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Bindable.Linq.Collections.BindableGrouping`2.Key">
            <summary>
            Gets the key of the <see cref="T:System.Linq.IGrouping`2"/>.
            </summary>
            <value></value>
            <returns>The key of the <see cref="T:System.Linq.IGrouping`2"/>.</returns>
        </member>
        <member name="P:Bindable.Linq.Collections.BindableGrouping`2.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Bindable.Linq.Collections.BindableGrouping`2.Item(System.Int32)">
            <summary>
            Gets the <typeparamref name="TElement"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:Bindable.Linq.Aggregators.Numerics.DoubleNumeric">
            <summary>
            Provides a numeric operations wrapper for double types.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.DoubleNumeric.Sum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Given a list of sourceCollection, adds them and returns the sum.
            </summary>
            <param name="sourceCollection">The sourceCollection to sum.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.DoubleNumeric.Average(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Given a list of sourceCollection, computes the average value.
            </summary>
            <param name="sourceCollection">The sourceCollection to average.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.DoubleNumeric.Min(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Given a list of sourceCollection, returns the lowest value.
            </summary>
            <param name="sourceCollection">The sourceCollection to locate the minimum value in.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.DoubleNumeric.Max(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Given a list of sourceCollection, returns the highest value.
            </summary>
            <param name="sourceCollection">The sourceCollection to locate the maximum value in.</param>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Aggregators.Numerics.Int32Numeric">
            <summary>
            Provides a numeric operations wrapper for int types.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.Int32Numeric.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Given a list of sourceCollection, adds them and returns the sum.
            </summary>
            <param name="sourceCollection">The sourceCollection to sum.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.Int32Numeric.Average(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Given a list of sourceCollection, computes the average value.
            </summary>
            <param name="sourceCollection">The sourceCollection to average.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.Int32Numeric.Min(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Given a list of sourceCollection, returns the lowest value.
            </summary>
            <param name="sourceCollection">The sourceCollection to locate the minimum value in.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.Int32Numeric.Max(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Given a list of sourceCollection, returns the highest value.
            </summary>
            <param name="sourceCollection">The sourceCollection to locate the maximum value in.</param>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Helpers.WeakTimer">
            <summary>
            Represents a timer that invokes its callback via a weak references.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Helpers.WeakTimer.#ctor(System.TimeSpan,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Helpers.WeakTimer"/> class.
            </summary>
            <param name="pollTime">The poll time.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Bindable.Linq.Helpers.WeakTimer.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Helpers.WeakTimer.Pause">
            <summary>
            Pauses this instance.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Helpers.WeakTimer.Continue">
            <summary>
            Continues this instance.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Helpers.WeakTimer.TimerTickCallback(System.Object)">
            <summary>
            Timers the tick callback.
            </summary>
            <param name="o">The o.</param>
        </member>
        <member name="M:Bindable.Linq.Helpers.WeakTimer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Helpers.CommonEventArgsCache">
            <summary>
            An internal cache for storing static <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instances.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Dependencies.PathNavigation.Tokens.ClrMemberToken">
            <summary>
            A property monitor for CLR based properties.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.ClrMemberToken.#ctor(System.Object,System.String,System.String,System.Action{System.Object,System.String},Bindable.Linq.Dependencies.PathNavigation.IPathNavigator)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Dependencies.PathNavigation.Tokens.ClrMemberToken"/> class.
            </summary>
            <param name="objectToObserve">The object to observe.</param>
            <param name="propertyName">The property path.</param>
            <param name="remainingPath">The remaining path.</param>
            <param name="callback">The callback.</param>
            <param name="pathNavigator">The path navigator.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.ClrMemberToken.DiscardCurrentTargetOverride">
            <summary>
            When overridden in a derived class, gives the class an opportunity to discard the current target.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.ClrMemberToken.MonitorCurrentTargetOverride">
            <summary>
            When overridden in a derived class, gives the class an opportunity to monitor the current target.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.ClrMemberToken.ReadCurrentPropertyValueOverride">
            <summary>
            When overriden in a derived class, gets the value of the current target object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.ClrMemberToken.DisposeOverride">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Dependencies.DependencyComparer">
            <summary>
            Compares dependencies.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.DependencyComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Dependencies.DependencyComparer"/> class.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.DependencyComparer.Equals(Bindable.Linq.Dependencies.IDependencyDefinition,Bindable.Linq.Dependencies.IDependencyDefinition)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <paramref name="T"/> to compare.</param>
            <param name="y">The second object of type <paramref name="T"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.DependencyComparer.GetHashCode(Bindable.Linq.Dependencies.IDependencyDefinition)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="P:Bindable.Linq.Dependencies.DependencyComparer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Dependencies.PathNavigation.Tokens.WindowsFormsMemberToken">
            <summary>
            A property monitor for CLR based properties.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.WindowsFormsMemberToken.#ctor(System.Object,System.String,System.String,System.Action{System.Object,System.String},Bindable.Linq.Dependencies.PathNavigation.IPathNavigator)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Dependencies.PathNavigation.Tokens.WindowsFormsMemberToken"/> class.
            </summary>
            <param name="objectToObserve">The object to observe.</param>
            <param name="propertyName">The property path.</param>
            <param name="remainingPath">The remaining path.</param>
            <param name="callback">The callback.</param>
            <param name="pathNavigator">The path navigator.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.WindowsFormsMemberToken.DiscardCurrentTargetOverride">
            <summary>
            When overridden in a derived class, gives the class an opportunity to discard the current target.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.WindowsFormsMemberToken.MonitorCurrentTargetOverride">
            <summary>
            When overridden in a derived class, gives the class an opportunity to monitor the current target.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.WindowsFormsMemberToken.ReadCurrentPropertyValueOverride">
            <summary>
            When overriden in a derived class, gets the value of the current target object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.Tokens.WindowsFormsMemberToken.DisposeOverride">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Operators.EmptySwitchDefinition`1">
            <summary>
            Represents a Switch statement that has been declared but no cases have been defined, and so the return type is not yet known.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Operators.EmptySwitchDefinition`1.#ctor(Bindable.Linq.Interfaces.IBindable{`0},Bindable.Linq.Threading.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Operators.EmptySwitchDefinition`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Bindable.Linq.Operators.EmptySwitchDefinition`1.CreateForResultType``1">
            <summary>
            Creates the type of for result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Dependencies.PropertyChangeObserver">
            <summary>
            Manages the subscription of PropertyChanged events on items.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PropertyChangeObserver.#ctor(System.EventHandler{System.ComponentModel.PropertyChangedEventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Dependencies.PropertyChangeObserver"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PropertyChangeObserver.AttachOverride(System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            When overriden in a derived class, allows the class to subscribe a given event handler to
            the publishing class.
            </summary>
            <param name="publisher">The event publisher.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PropertyChangeObserver.DetachOverride(System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            When overriden in a derived class, allows the class to unsubscribe a given event handler from
            the publishing class.
            </summary>
            <param name="publisher">The event publisher.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PropertyChangeObserver.DisposeOverride">
            <summary>
            When overridden in a derived class, allows the class to add custom code when the object is disposed.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Helpers.Weak">
            <summary>
            Contains methods to build weak event handlers.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Helpers.Weak.Event``1(System.EventHandler{``0})">
            <summary>
            Creates a weak event handler for a given event handler.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <param name="eventHandler">The event handler.</param>
        </member>
        <member name="T:Bindable.Linq.Helpers.WeakEvent`1">
            <summary>
            Represents a wrapper around subscribing to a weak event and keeping the event handler callback alive.
            </summary>
            <typeparam name="TEventArgs">The type of the event args.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Helpers.WeakEvent`1.#ctor(System.EventHandler{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Helpers.WeakEvent`1"/> class.
            </summary>
            <param name="originalHandler">The original handler.</param>
        </member>
        <member name="P:Bindable.Linq.Helpers.WeakEvent`1.HandlerProxy">
            <summary>
            Gets or sets the subscriber.
            </summary>
            <value>The subscriber.</value>
        </member>
        <member name="T:Bindable.Linq.Helpers.ElementComparerFactory">
            <summary>
            A comparer used for comparing elements within a collection for equality. This is often used for IndexOf() operations, the goal 
            being to find the index of a particular item, not the index of anything matching the particular item (in the case of Bindable LINQ 
            result sets, that is). 
            </summary>
        </member>
        <member name="T:Bindable.Linq.Operators.ProjectOperator`2">
            <summary>
            Projects one item to another item.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Operators.ProjectOperator`2.#ctor(Bindable.Linq.Interfaces.IBindable{`0},System.Func{`0,`1},Bindable.Linq.Threading.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Operators.ProjectOperator`2"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="projector">The projector.</param>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Bindable.Linq.Operators.ProjectOperator`2.RefreshOverride">
            <summary>
            When overridden in a derived class, refreshes the object.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Aggregators.Numerics.DecimalNumeric">
            <summary>
            Provides a numeric operations wrapper for decimal types.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.DecimalNumeric.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Given a list of sourceCollection, adds them and returns the sum.
            </summary>
            <param name="sourceCollection">The sourceCollection to sum.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.DecimalNumeric.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Given a list of sourceCollection, computes the average value.
            </summary>
            <param name="sourceCollection">The sourceCollection to average.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.DecimalNumeric.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Given a list of sourceCollection, returns the lowest value.
            </summary>
            <param name="sourceCollection">The sourceCollection to locate the minimum value in.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.DecimalNumeric.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Given a list of sourceCollection, returns the highest value.
            </summary>
            <param name="sourceCollection">The sourceCollection to locate the maximum value in.</param>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Dependencies.Instances.ItemDependency`1">
            <summary>
            Represents an property dependency applied over a collection of items.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Instances.ItemDependency`1.#ctor(System.String,Bindable.Linq.Interfaces.IBindableCollection{`0},Bindable.Linq.Dependencies.PathNavigation.IPathNavigator)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Dependencies.Instances.ItemDependency`1"/> class.
            </summary>
            <param name="propertyPath">The property path.</param>
            <param name="sourceElements">The source elements.</param>
            <param name="pathNavigator">The path navigator.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Instances.ItemDependency`1.SetReevaluateElementCallback(System.Action{System.Object,System.String})">
            <summary>
            Sets the callback action the dependency should invoke when the dependent object has a property that changes.
            </summary>
            <param name="action">The callback action to invoke.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Instances.ItemDependency`1.SetReevaluateCallback(System.Action{System.Object})">
            <summary>
            Sets the callback action the dependency should invoke when the dependent object changes, signalling the
            whole collection should re-evaluate.
            </summary>
            <param name="action">The callback action to invoke.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Instances.ItemDependency`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Instances.ItemDependency`1.AddItem(`0)">
            <summary>
            Adds the item.
            </summary>
            <param name="addedItem">The added item.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Instances.ItemDependency`1.RemoveItem(`0)">
            <summary>
            Removes the item.
            </summary>
            <param name="removedItem">The removed item.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Instances.ItemDependency`1.Element_PropertyChanged(System.Object,System.String)">
            <summary>
            Called when a property on an element changes.
            </summary>
            <param name="element">The element.</param>
            <param name="propertyPath">The property path.</param>
        </member>
        <member name="P:Bindable.Linq.Dependencies.Instances.ItemDependency`1.DependencyLock">
            <summary>
            Gets the dependency lock.
            </summary>
            <value>The dependency lock.</value>
        </member>
        <member name="T:Bindable.Linq.Dependencies.PathNavigation.TokenFactories.WpfMemberTokenFactory">
            <summary>
            A property parser for WPF Dependency Properties.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.TokenFactories.WpfMemberTokenFactory.ParseNext(System.Object,System.String,System.Action{System.Object,System.String},Bindable.Linq.Dependencies.PathNavigation.IPathNavigator)">
            <summary>
            Creates an appropriate property monitor for the remaining property path string on the target object.
            </summary>
            <param name="target">The target.</param>
            <param name="propertyPath">The property path.</param>
            <param name="callback">The callback.</param>
            <param name="pathNavigator">The path navigator.</param>
            <returns>
            An appropriate <see cref="T:Bindable.Linq.Dependencies.PathNavigation.Tokens.IToken"/> for the property.
            </returns>
        </member>
        <member name="T:Bindable.Linq.Dependencies.PathNavigation.TokenFactories.SilverlightMemberTokenFactory">
            <summary>
            A parser for Silverlight dependency properties.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.TokenFactories.SilverlightMemberTokenFactory.ParseNext(System.Object,System.String,System.Action{System.Object,System.String},Bindable.Linq.Dependencies.PathNavigation.IPathNavigator)">
            <summary>
            Creates an appropriate property monitor for the remaining property path string on the target object.
            </summary>
            <param name="target">The target.</param>
            <param name="propertyPath">The property path.</param>
            <param name="callback">The callback.</param>
            <param name="pathNavigator">The path navigator.</param>
            <returns>
            An appropriate <see cref="T:Bindable.Linq.Dependencies.PathNavigation.Tokens.IToken"/> for the property.
            </returns>
        </member>
        <member name="T:Bindable.Linq.Iterators.ItemSorter`1">
            <summary>
            Base class used for creating a list of comparers.
            </summary>
            <typeparam name="S">The type of sort item source item.</typeparam>
            <remarks>
            This base class is used so that we can enable strong typing without the comparers 
            needing to know the key types (K) used by the subsequent ItemSorters. 
            See the remarks for <see cref="T:Bindable.Linq.Iterators.ItemSorter`2"/> for details.
            </remarks>
        </member>
        <member name="M:Bindable.Linq.Iterators.ItemSorter`1.Compare(`0,`0)">
            <summary>
            Compares two items, returning an integer signifying if one should be sorted above or 
            below another. 
            </summary>
            <param name="left">The first item to compare.</param>
            <param name="right">The second item to compare.</param>
        </member>
        <member name="T:Bindable.Linq.Iterators.ItemSorter`2">
            <summary>
            A class that is nested within itself to create a chain of IComparers. 
            </summary>
            <typeparam name="S">The source type.</typeparam>
            <typeparam name="K">The type of key used in the comparisson.</typeparam>
            <remarks>
            Suppose someone had the following in a LINQ query:
            
                order by customer.Name, customer.DateOfBirth
            
            The first part of the OrderBy would produce an OrderByIterator, initialized with an ItemSorter
            that sorts by the customer.Name.
            
            The second part of the OrderBy would produce another OrderByIterator, initialized with a 
            new ItemSorter. That ItemSorter would have the original ItemSorter (customer.Name) as its "superior", 
            and would use customer.DateOfBirth as the "fallback" sort. 
            
            Taking this even further:
            
               order by customer.Name, customer.DateOfBirth, customer.EmailAddress
               
            Would result in the following graph:
            
                OrderByIterator.ItemSorter          // customer.EmailAddress
                               .Superior            // customer.DateOfBirth
                               .Superior            // customer.Name
            
            (Note that this is in the reverse order to the LINQ query)
            
            When the Compare method is called on the ItemSorter, it first tries its superior (which tries 
            its superior, which tries its superior, ad infinitum). 
            </remarks>
        </member>
        <member name="M:Bindable.Linq.Iterators.ItemSorter`2.#ctor(Bindable.Linq.Iterators.ItemSorter{`0},System.Func{`0,`1},System.Collections.Generic.IComparer{`1},System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="superior">The superior.</param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <param name="ascending"></param>
        </member>
        <member name="M:Bindable.Linq.Iterators.ItemSorter`2.Compare(`0,`0)">
            <summary>
            Compares two items, returning an integer signifying if one should be sorted above or 
            below another. 
            </summary>
            <param name="left">The first item to compare.</param>
            <param name="right">The second item to compare.</param>
            <returns>
            As described in the class remarks, we first try to use the "superior's" Compare method. 
            Only when the superior returns "0" (same value) do we use our own IComparer. 
            </returns>
        </member>
        <member name="T:Bindable.Linq.Dependencies.CollectionChangeObserver">
            <summary>
            Manages the subscription of CollectionChanged events on items.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.CollectionChangeObserver.#ctor(System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Dependencies.CollectionChangeObserver"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.CollectionChangeObserver.AttachOverride(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>
            When overriden in a derived class, allows the class to subscribe a given event handler to
            the publishing class.
            </summary>
            <param name="publisher">The event publisher.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.CollectionChangeObserver.DetachOverride(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>
            When overriden in a derived class, allows the class to unsubscribe a given event handler from
            the publishing class.
            </summary>
            <param name="publisher">The event publisher.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.CollectionChangeObserver.DisposeOverride">
            <summary>
            When overridden in a derived class, allows the class to add custom code when the object is disposed.
            </summary>
        </member>
        <member name="T:Bindable.Linq.Aggregators.Numerics.Int64Numeric">
            <summary>
            Provides a numeric operations wrapper for long types.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.Int64Numeric.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Given a list of sourceCollection, adds them and returns the sum.
            </summary>
            <param name="sourceCollection">The sourceCollection to sum.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.Int64Numeric.Average(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Given a list of sourceCollection, computes the average value.
            </summary>
            <param name="sourceCollection">The sourceCollection to average.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.Int64Numeric.Min(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Given a list of sourceCollection, returns the lowest value.
            </summary>
            <param name="sourceCollection">The sourceCollection to locate the minimum value in.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.Int64Numeric.Max(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Given a list of sourceCollection, returns the highest value.
            </summary>
            <param name="sourceCollection">The sourceCollection to locate the maximum value in.</param>
            <returns></returns>
        </member>
        <member name="T:Bindable.Linq.Dependencies.PathNavigation.PathNavigator">
            <summary>
            A factory for the construction of property monitors by detecting information about the object.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.PathNavigator.#ctor(Bindable.Linq.Dependencies.PathNavigation.TokenFactories.ITokenFactory[])">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Dependencies.PathNavigation.PathNavigator"/> class.
            </summary>
            <param name="traversers">The traversers.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.PathNavigation.PathNavigator.TraverseNext(System.Object,System.String,System.Action{System.Object,System.String})">
            <summary>
            Creates an appropriate property monitor for the remaining property path string on the target object.
            </summary>
            <param name="target">The target.</param>
            <param name="propertyPath">The property path.</param>
            <param name="callback">The callback.</param>
            <returns>
            An appropriate <see cref="T:Bindable.Linq.Dependencies.PathNavigation.Tokens.IToken"/> for the property.
            </returns>
        </member>
        <member name="T:Bindable.Linq.Dependencies.Definitions.ItemDependencyDefinition">
            <summary>
            Defines a dependency on a property on an item where the item implements the INotifyPropertyChanged interface.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Definitions.ItemDependencyDefinition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Dependencies.Definitions.ItemDependencyDefinition"/> class.
            </summary>
            <param name="propertyPath">The property path.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Definitions.ItemDependencyDefinition.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Bindable.Linq.Dependencies.Definitions.ItemDependencyDefinition"/> class.
            </summary>
            <param name="propertyPath">The property path.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Definitions.ItemDependencyDefinition.AppliesToCollections">
            <summary>
            Determines whether this instance can construct dependencies for a collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Definitions.ItemDependencyDefinition.AppliesToSingleElement">
            <summary>
            Determines whether this instance can construct dependencies for a single element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Definitions.ItemDependencyDefinition.ConstructForCollection``1(Bindable.Linq.Interfaces.IBindableCollection{``0},Bindable.Linq.Dependencies.PathNavigation.IPathNavigator)">
            <summary>
            Constructs the dependency for a collection of elements.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="sourceElements">The source elements.</param>
            <param name="pathNavigator">The path navigator.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Definitions.ItemDependencyDefinition.ConstructForElement``1(``0,Bindable.Linq.Dependencies.PathNavigation.IPathNavigator)">
            <summary>
            Constructs a dependency for a single element.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="sourceElement">The source element.</param>
            <param name="pathNavigator">The path navigator.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Dependencies.Definitions.ItemDependencyDefinition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Bindable.Linq.Dependencies.Definitions.ItemDependencyDefinition.ParameterName">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
            <value>The name of the parameter.</value>
        </member>
        <member name="P:Bindable.Linq.Dependencies.Definitions.ItemDependencyDefinition.PropertyPath">
            <summary>
            Gets or sets the property path.
            </summary>
            <value>The property path.</value>
        </member>
        <member name="T:Bindable.Linq.Aggregators.Numerics.FloatNullNumeric">
            <summary>
            Provides a numeric operations wrapper for nullable float types.
            </summary>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.FloatNullNumeric.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Given a list of sourceCollection, adds them and returns the sum.
            </summary>
            <param name="sourceCollection">The sourceCollection to sum.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.FloatNullNumeric.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Given a list of sourceCollection, computes the average value.
            </summary>
            <param name="sourceCollection">The sourceCollection to average.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.FloatNullNumeric.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Given a list of sourceCollection, returns the lowest value.
            </summary>
            <param name="sourceCollection">The sourceCollection to locate the minimum value in.</param>
            <returns></returns>
        </member>
        <member name="M:Bindable.Linq.Aggregators.Numerics.FloatNullNumeric.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Given a list of sourceCollection, returns the highest value.
            </summary>
            <param name="sourceCollection">The sourceCollection to locate the maximum value in.</param>
            <returns></returns>
        </member>
    </members>
</doc>
