///////////////////////////////////////////////////////////
//  Tag.cs
//  Implementation of the Class Tag
//  Generated by Enterprise Architect
//  Created on:      14-Sep-2012 14:41:50
///////////////////////////////////////////////////////////

namespace Lok.Unik.ModelCommon.Client
{
    using System;
    using System.Xml.Serialization;

    using Interfaces;

    using Raven.Imports.Newtonsoft.Json;
    using Raven.Imports.Newtonsoft.Json.Converters;

    public enum TagType
    {
        System = 0,

        User = 1,

        ItemRegistration = 2,

        ContentLibrary = 3,

        Application = 4,

        SchedulePlan = 5,
        
        Device = 6,

        Default = 7,

        ContentPackage = 8, 

        Alert = 9,
        
        Facility = 10,

        AwareDevice = 11

    }

    public class Tag : ITag, IEquatable<Tag>
    {
        private const string URLFormat = "tags://{0}/{1}?{2}={3}";

        public Guid Id { get; set; }

        [JsonIgnore]
        [XmlIgnore]
        public Uri Path
        {
            get
            {
                return new Uri(FullPath);
            }
        }

        public string FullPath
        {
            get
            {
                return string.Format(URLFormat, Type, Category.Name, Attribute, Value);
            }
        }

        public string Attribute { get; set; }

        public string Value { get; set; }

        public TagCategory Category { get; set; }

        [JsonConverter(typeof(StringEnumConverter))]
        public TagType Type { get; set; }

        #region Metadata

        public DateTime CreateDate { get; set; }

        public string CreatorPrincipalId { get; set; }

        public bool SystemType { get; set; }

        #endregion

        public Tag()
        {
            Category = new TagCategory();
            this.CreateDate = DateTime.UtcNow;
        }

        #region Tag Comparison

        /// <summary>
        /// Indicates whether the current object is equal to another object of the same type.
        /// </summary>
        /// <returns>
        /// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
        /// </returns>
        /// <param name="other">An object to compare with this object.</param>
        public bool Equals(Tag other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }
            if (ReferenceEquals(this, other))
            {
                return true;
            }
            //return Equals(other.Path, this.Path) && Equals(other.Attribute, this.Attribute) && Equals(other.Value, this.Value);
            //return Equals(other.Value, this.Value) && Equals(other.Category.Name, this.Category.Name);
            return Equals(other.FullPath, this.FullPath);
        }

        /// <summary>
        /// Determines whether the specified <see cref="T:System.Object"/> Tag is equal to the current <see cref="T:System.Object"/> Tag.
        /// </summary>
        /// <returns>
        /// true if the specified <see cref="T:System.Object"/> tag is equal to the current <see cref="T:System.Object"/> tag; otherwise, false.
        /// </returns>
        /// <param name="obj">The <see cref="T:System.Object"/> tag to compare with the current <see cref="T:System.Object"/> tag. </param><filterpriority>2</filterpriority>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }
            if (ReferenceEquals(this, obj))
            {
                return true;
            }
            return obj.GetType() == typeof(Tag) && this.Equals((Tag)obj);
        }

        /// <summary>
        /// Serves as a hash function for Tag type. 
        /// </summary>
        /// <returns>
        /// A hash code for the current <see cref="T:System.Object"/> tag.
        /// </returns>
        /// <filterpriority>2</filterpriority>
        public override int GetHashCode()
        {
            unchecked
            {
                var result = (this.Path != null ? this.Path.GetHashCode() : 0);
                result = (result * 397) ^ (this.Attribute != null ? this.Attribute.GetHashCode() : 0);
                result = (result * 397) ^ (this.Value != null ? this.Value.GetHashCode() : 0);
                return result;
            }
        }

        public static bool operator ==(Tag left, Tag right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Tag left, Tag right)
        {
            return !Equals(left, right);
        }

        #endregion
    }

    //end Tag
}

//end namespace System